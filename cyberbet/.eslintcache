[{"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/index.js":"1","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/App.js":"2","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/store/UserStore.js":"3","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/store/DeviceStore.js":"4","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/store/UserDataStore.js":"5","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/AppRouter.js":"6","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/NavBar.js":"7","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/http/userAPI.js":"8","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/http/userDataAPI.js":"9","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/http/deviceAPI.js":"10","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/routes.js":"11","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/http/index.js":"12","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/utils/consts.js":"13","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/DevicePage.js":"14","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/Auth.js":"15","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/Shop.js":"16","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/Basket.js":"17","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/Champ.js":"18","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/Admin.js":"19","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/DeviceItem.js":"20","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/DeviceListStart.js":"21","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/modals/CreateType.js":"22","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/modals/CreateBrand.js":"23","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/DeviceList.js":"25","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/BrandBar.js":"26","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/TypeBar.js":"27","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/modals/CreateDevice.js":"28","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/Inc.js":"29","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/modals/CreateTableChamp.js":"30","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/modals/CreateChampLap.js":"31","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/VSPage.js":"32","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/AuthPromo.js":"33","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/http/vsAPI.js":"34","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/Footer.js":"35","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/PayPal.js":"36","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/http/qiwiAPI.js":"37","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/Qiwi.js":"38","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/modals/CreateQiwi.js":"39","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/modals/CreateChampWin.js":"40","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/DeviceListStartWin.js":"41","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/CreateQiwiTypesDonate.js":"42","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/QiwiPageTest.js":"43","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/LeftBar.js":"44","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/lern/UseReff.js":"45"},{"size":529,"mtime":1627570211119,"results":"46","hashOfConfig":"47"},{"size":1834,"mtime":1629128606312,"results":"48","hashOfConfig":"47"},{"size":408,"mtime":1623429294723,"results":"49","hashOfConfig":"47"},{"size":2091,"mtime":1629739129929,"results":"50","hashOfConfig":"47"},{"size":293,"mtime":1620350563090,"results":"51","hashOfConfig":"47"},{"size":795,"mtime":1619618104929,"results":"52","hashOfConfig":"47"},{"size":3658,"mtime":1629575229350,"results":"53","hashOfConfig":"47"},{"size":1459,"mtime":1629681438856,"results":"54","hashOfConfig":"47"},{"size":339,"mtime":1628648538776,"results":"55","hashOfConfig":"47"},{"size":4802,"mtime":1629425244122,"results":"56","hashOfConfig":"47"},{"size":1420,"mtime":1629510266040,"results":"57","hashOfConfig":"47"},{"size":407,"mtime":1619618104933,"results":"58","hashOfConfig":"47"},{"size":386,"mtime":1629504386881,"results":"59","hashOfConfig":"47"},{"size":15641,"mtime":1628813221960,"results":"60","hashOfConfig":"47"},{"size":9672,"mtime":1629681900793,"results":"61","hashOfConfig":"47"},{"size":4866,"mtime":1629801871407,"results":"62","hashOfConfig":"47"},{"size":146,"mtime":1619618104933,"results":"63","hashOfConfig":"47"},{"size":2493,"mtime":1629351294311,"results":"64","hashOfConfig":"47"},{"size":1288,"mtime":1629129972554,"results":"65","hashOfConfig":"47"},{"size":1055,"mtime":1628977594329,"results":"66","hashOfConfig":"47"},{"size":10710,"mtime":1629894683575,"results":"67","hashOfConfig":"47"},{"size":2479,"mtime":1629351564391,"results":"68","hashOfConfig":"47"},{"size":2308,"mtime":1629351564387,"results":"69","hashOfConfig":"47"},{"size":801,"mtime":1619618104933,"results":"70","hashOfConfig":"47"},{"size":643,"mtime":1629739153357,"results":"71","hashOfConfig":"47"},{"size":2036,"mtime":1628728482056,"results":"72","hashOfConfig":"47"},{"size":3557,"mtime":1629840592372,"results":"73","hashOfConfig":"47"},{"size":5941,"mtime":1629798260351,"results":"74","hashOfConfig":"47"},{"size":107,"mtime":1624274299745,"results":"75","hashOfConfig":"47"},{"size":2318,"mtime":1629351564403,"results":"76","hashOfConfig":"47"},{"size":2253,"mtime":1629351435857,"results":"77","hashOfConfig":"47"},{"size":18900,"mtime":1628729240963,"results":"78","hashOfConfig":"47"},{"size":381,"mtime":1629681830286,"results":"79","hashOfConfig":"47"},{"size":505,"mtime":1629343180653,"results":"80","hashOfConfig":"47"},{"size":4111,"mtime":1629207612543,"results":"81","hashOfConfig":"47"},{"size":2301,"mtime":1628198458481,"results":"82","hashOfConfig":"47"},{"size":542,"mtime":1629658870581,"results":"83","hashOfConfig":"47"},{"size":9850,"mtime":1629680258162,"results":"84","hashOfConfig":"47"},{"size":4993,"mtime":1629662186716,"results":"85","hashOfConfig":"47"},{"size":2216,"mtime":1629351349630,"results":"86","hashOfConfig":"47"},{"size":4364,"mtime":1629578846365,"results":"87","hashOfConfig":"47"},{"size":994,"mtime":1629659116405,"results":"88","hashOfConfig":"47"},{"size":4898,"mtime":1629658925548,"results":"89","hashOfConfig":"47"},{"size":2194,"mtime":1629659196208,"results":"90","hashOfConfig":"47"},{"size":938,"mtime":1629781112708,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"14tcx03",{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"94"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"94"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"94"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"94"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"94"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"94"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"94"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"94"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"94"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"94"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"94"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"94"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":8,"source":"174","usedDeprecatedRules":"94"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"94"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"182","usedDeprecatedRules":"94"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"94"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"94"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"94"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"94"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"94"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"94"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"94"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/index.js",[],["210","211"],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/App.js",["212","213","214","215"],"import React, {useContext, useEffect, useState} from 'react';\nimport {BrowserRouter} from \"react-router-dom\";\nimport AppRouter from \"./components/AppRouter\";\nimport NavBar from \"./components/NavBar\";\nimport Footer from \"./components/Footer\";\nimport {observer} from \"mobx-react-lite\";\nimport {Context} from \"./index\";\nimport {check} from \"./http/userAPI\";\nimport {Spinner} from \"react-bootstrap\";\nimport {fetchBrands, fetchTypes} from \"./http/deviceAPI\";\nimport {checkUserData} from \"./http/userDataAPI\";\nimport './App.css';\n\nimport PayPal from \"./components/PayPal\";\nimport Qiwi from \"./pages/Qiwi\";\n\n\nconst App = observer(() => {\n    const {user, device, userdata} = useContext(Context)\n    const [loading1, setLoading1] = useState(true)\n    const [loading2, setLoading2] = useState(true)\n    const [loading3, setLoading3] = useState(true)\n    const [loading4, setLoading4] = useState(true)\n\n    useEffect(() => {\n        try{\n            check().then(data => {\n                user.setUser(data)\n                user.setIsAuth(true)\n            }).finally(() => setLoading1(false))\n            checkUserData(user.checkUser.id).then(data => userdata.setUserData(data)).finally(() => setLoading2(false))\n        }catch (e) {\n            console.log(e+\" вы не авторезированы\")\n        }\n\n        fetchBrands().then(data => device.setBrands(data)).finally(() => setLoading3(false))\n        fetchTypes().then(data => device.setTypes(data)).finally(() => setLoading4(false))\n    }, [])\n\n    if (loading1 && loading2 && loading3 && loading4) {\n        return <Spinner animation={\"grow\"}/>\n    }\n\n    return (\n        <BrowserRouter>\n            <NavBar />\n            <AppRouter />\n            {/*<Footer/>*/}\n            {/*<PayPal/>*/}\n            {/*<Qiwi/>*/}\n        </BrowserRouter>\n    );\n});\n\nexport default App;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/store/UserStore.js",[],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/store/DeviceStore.js",[],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/store/UserDataStore.js",[],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/AppRouter.js",[],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/NavBar.js",["216","217","218","219","220","221","222"],"import React, {useContext, useEffect, useState} from 'react';\nimport {Context} from \"../index\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport {NavLink} from \"react-router-dom\";\nimport {ADMIN_ROUTE, LOGIN_ROUTE, SHOP_ROUTE, ADMIN_SETTINGS, QIWI_ROUTE} from \"../utils/consts\";\nimport {Button} from \"react-bootstrap\";\nimport {observer} from \"mobx-react-lite\";\nimport Container from \"react-bootstrap/Container\";\nimport {useHistory} from 'react-router-dom'\nimport {fetchBrands, fetchDevices, fetchTypes} from \"../http/deviceAPI\";\nimport CreateDevice from \"./modals/CreateDevice\";\nimport CreateQiwi from \"./modals/CreateQiwi\";\n\nconst NavBar = observer(() => {\n    const {device, user, userdata} = useContext(Context)\n    const history = useHistory()\n\n    const [deviceVisible, setDeviceVisible] = useState(false)\n\n    const logOut = () => {\n        localStorage.removeItem('token')\n        userdata.setUserData([])\n        user.setUser({})\n        user.setIsAuth(false)\n    }\n\n\n    // const viewHome = () => {\n    //     window.open('https://cyberbet.online')\n    // }\n\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Container>\n                <NavLink style={{color: 'white'}} to={SHOP_ROUTE}>Championship Heroes </NavLink>\n                {user.isAuth ?\n                    <Nav className=\"ml-auto\" style={{color: 'white'}}>\n                        {user.checkUser.role === \"ADMIN\" ?\n                            <Nav className=\"ml-auto\" style={{color: 'white'}}>\n                                <Button\n                                    variant={\"outline-light\"}\n                                    onClick={() => history.push(ADMIN_SETTINGS)}\n                                >\n                                    Championship\n                                </Button>\n                            </Nav>\n                            :\n                            <Nav></Nav>\n                        }\n                        {/*<Button*/}\n                        {/*    variant={\"outline-light\"}*/}\n                        {/*    onClick={() => history.push(QIWI_ROUTE)}*/}\n                        {/*    className=\"ml-2\"*/}\n                        {/*>DONATE*/}\n                        {/*</Button>*/}\n\n                        <Button\n                            variant={\"outline-light\"}\n                            onClick={() => setDeviceVisible(true)}\n                            className=\"ml-2\"\n                        >\n                            DONATE\n                        </Button>\n                        <CreateQiwi show={deviceVisible} onHide={() => setDeviceVisible(false)} nametype={\"cyberbet\"}/>\n\n                        <Button\n                            variant={\"outline-light\"}\n                            onClick={() => history.push(ADMIN_ROUTE)}\n                            className=\"ml-2\"\n                        >\n                            {userdata.userData.username}\n                        </Button>\n                        <Button\n                            variant={\"outline-light\"}\n                            onClick={() => logOut()}\n                            className=\"ml-2\"\n                        >\n                            Выйти\n                        </Button>\n                    </Nav>\n                    :\n                    <Nav className=\"ml-auto\" style={{color: 'white'}}>\n                        <Button variant={\"outline-light\"} onClick={() => history.push(LOGIN_ROUTE)}>Авторизация</Button>\n                    </Nav>\n                }\n            </Container>\n        </Navbar>\n\n    );\n\n})\n\nexport default NavBar;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/http/userAPI.js",["223"],"import {$authHost, $host} from \"./index\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const registration = async (email, password, username, rating, twitch, facebook, instagram, telegram, vk, ok, role, promo) => {\n    const a = 2\n    const {data} = await $host.post('api/user/registration', {email, username, password, rating, twitch, facebook, instagram, telegram, vk, ok, role, promo})\n    localStorage.setItem('token', data.token)\n    return jwt_decode(data.token)\n}\n\nexport const registrationpromo = async (email, password, username, rating, twitch, facebook, instagram, telegram, vk, ok, role, promo) => {\n    const {data} = await $host.post('api/user/registration/' + promo, {email, username, password, rating, twitch, facebook, instagram, telegram, vk, ok, role, promo})\n    localStorage.setItem('token', data.token)\n    return jwt_decode(data.token)\n}\n\n// export const registration = async (user) => {\n//     const {data} = await $authHost.post('api/device', user)\n//     localStorage.setItem('token', data.token)\n//     return jwt_decode(data.token)\n// }\n\nexport const login = async (email, password) => {\n    const {data} = await $host.post('api/user/login', {email, password})\n    localStorage.setItem('token', data.token)\n    return jwt_decode(data.token)\n}\n\nexport const check = async () => {\n        const {data} = await $authHost.get('api/user/auth' )\n        localStorage.setItem('token', data.token)\n        return jwt_decode(data.token)\n}\n\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/http/userDataAPI.js",["224"],"import {$authHost, $host} from \"./index\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const checkUserData= async (id) => {\n    const {data} = await $authHost.get('api/user/userdata/' + id )\n    return data\n}\n\n\nexport const fetchPromo = async (id) => {\n    const {data} = await $host.get('api/user/userdata/promo/' + id)\n    return data\n}\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/http/deviceAPI.js",["225"],"import {$authHost, $host} from \"./index\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const createType = async (type) => {\n    const {data} = await $authHost.post('api/type', type)\n    return data\n}\n\nexport const createTableRandom = async (type) => {\n    const {data} = await $authHost.post('api/device/champtable', type)\n    return data\n}\n\nexport const createChampLap = async (type) => {\n    const {data} = await $authHost.post('api/device/champlap', type)\n    return data\n}\n\nexport const createChampWin = async (type) => {\n    const {data} = await $authHost.post('api/device/champwin', type)\n    return data\n}\n\nexport const fetchTypes = async () => {\n    const {data} = await $host.get('api/type')\n    return data\n}\n\n// export const fetchTypesChampStart = async () => {\n//     const {data} = await $host.get('api/type/champ/start')\n//     return data\n// }\n\nexport const fetchTypesBrandIdname = async (typeid) => {\n    const {data} = await $host.get('api/type/brand/idname/' + typeid)\n    return data\n}\n\n// export const fetchTypesStart = async () => {\n//     const {data} = await $host.get('api/type/start')\n//     return data\n// }\n\n\nexport const createBrand = async (brands) => {\n    const {data} = await $authHost.post('api/brand', brands)\n    return data\n}\n\n\nexport const indexSelectTypeNow = async () => {\n    const {data} = await $host.get('api/device/indextype', )\n    return data\n}\n\nexport const userCheck = async (id, checked, typeid, brandid, lap) => {\n    const {data} = await $authHost.post('api/device/usercheck', {id, checked, typeid, brandid, lap})\n    return data\n}\n\nexport const oppCheck = async (id, checked, typeid, brandid) => {\n    const {data} = await $authHost.post('api/device/oppcheck', {id, checked, typeid, brandid})\n    return data\n}\n\nexport const postDataTimeGame = async (typeId, brandId, id, valueDataTime, lap) => {\n    const {data} = await $authHost.post('api/device/setdatatimegame', {typeId, brandId, id, valueDataTime, lap})\n    return data\n}\n\n// export const postDataImg = async (id, userdataId, img) => {\n//     const {data} = await $authHost.post('api/device/setdataimg', {id, userdataId, img})\n//     return data\n// }\n\nexport const createImg = async (formData) => {\n    const {data} = await $authHost.post('api/device/setdataimg', formData)\n    return data\n}\n\nexport const imgPhotoGet = async (id) => {\n    const {data} = await $host.get('api/device/img/photo/' + id)\n    return data\n}\n\nexport const postDataRating = async (id, userdataId, ratingValue) => {\n    const {data} = await $authHost.post('api/device/setdatarating', {id, userdataId, ratingValue})\n    return data\n}\nexport const postDataTwitch = async (id, userdataId, TwitchValue) => {\n    const {data} = await $authHost.post('api/device/setdatatwitch', {id, userdataId, TwitchValue})\n    return data\n}\nexport const postDataFacebook = async (id, userdataId, FacebookValue) => {\n    const {data} = await $authHost.post('api/device/setdatafacebook', {id, userdataId, FacebookValue})\n    return data\n}\nexport const postDataInstagram = async (id, userdataId, InstagramValue) => {\n    const {data} = await $authHost.post('api/device/setdatainstagram', {id, userdataId, InstagramValue})\n    return data\n}\nexport const postDataTelegram = async (id, userdataId, TelegramValue) => {\n    const {data} = await $authHost.post('api/device/setdatatelegram', {id, userdataId, TelegramValue})\n    return data\n}\nexport const postDataVK = async (id, userdataId, VKValue) => {\n    const {data} = await $authHost.post('api/device/setdatavk', {id, userdataId, VKValue})\n    return data\n}\nexport const postDataOK = async (id, userdataId, OKValue) => {\n    const {data} = await $authHost.post('api/device/setdataok', {id, userdataId, OKValue})\n    return data\n}\n\nexport const fetchBrands = async () => {\n    const {data} = await $host.get('api/brand', )\n    return data\n}\n\n// export const fetchBrandsAll = async () => {\n//     const {data} = await $host.get('api/brand/all', )\n//     return data\n// }\n\nexport const createDevice = async (device) => {\n    const {data} = await $authHost.post('api/device', device)\n    return data\n}\n\nexport const fetchDevices = async (typeId, brandId, page, limit= 5) => {\n    const {data} = await $host.get('api/device', {params: {\n            typeId, brandId, page, limit\n        }})\n    return data\n}\n\n// export const fetchDevicesStart = async (typeId, brandId, page, limit= 5) => {\n//     const {data} = await $host.get('api/device/start', {params: {\n//             typeId, brandId, page, limit\n//         }})\n//     return data\n// }\n\nexport const fetchOneDevice = async (id) => {\n    const {data} = await $host.get('api/device/' + id)\n    return data\n}\n\n\nexport const fetchVSDevice = async (type, id) => {\n    const {data} = await $host.get('api/vs/' + type + '/'+ id)\n    return data\n}\n\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/routes.js",[],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/http/index.js",[],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/utils/consts.js",[],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/DevicePage.js",["226","227","228","229","230","231"],"import React, {useContext, useEffect, useState} from 'react';\nimport {Button, Card, Col, Container, Row, Image, Form, Spinner} from \"react-bootstrap\";\nimport bigStar from '../assets/bigStar.png'\nimport {Link, useParams} from 'react-router-dom'\nimport {\n    createImg,\n    fetchOneDevice, imgPhoto, imgPhotoGet,\n    postDataFacebook,\n    postDataInstagram, postDataOK,\n    postDataRating,\n    postDataTelegram,\n    postDataTwitch, postDataVK\n} from \"../http/deviceAPI\";\nimport moment from 'moment'\nimport ru from 'moment/locale/ru'\nimport {Context} from \"../index\";\nimport {observer} from \"mobx-react\";\nimport {fetchPromo} from \"../http/userDataAPI\";\n\n\nconst DevicePage = observer (() => {\n    const [loading1, setLoading1] = useState(true)\n    const [loading2, setLoading2] = useState(true)\n    const [loading3, setLoading3] = useState(true)\n    const [loading4, setLoading4] = useState(true)\n    const {id} = useParams()\n    const {user, userdata} = useContext(Context)\n    const [device, setDevice] = useState({})\n    const [userId, setUserId] = useState(0)\n    const [userdataId, setUserdataId] = useState(0)\n    const [ratingValue, setRatingValue] = useState(0)\n    const [TwitchValue, setTwitchValue] = useState('')\n    const [FacebookValue, setFacebookValue] = useState('')\n    const [InstagramValue, setInstagramValue] = useState('')\n    const [TelegramValue, setTelegramValue] = useState('')\n    const [VKValue, setVKValue] = useState('')\n    const [OKValue, setOKValue] = useState('')\n    const [file, setFile] = useState(null)\n    const [promo, setPromo] = useState(0)\n    const [imgPhoto, setImgPhoto] = useState('photo.jpg')\n\n    const [useEffectBool, setUseEffectBool] = useState(true)\n\n    useEffect(() => {\n\n        if(useEffectBool) {\n            fetchOneDevice(id).then(data => setDevice(data)).finally(() => setLoading1(false))\n            imgPhotoGet(id).then(data => setImgPhoto(data)).finally(() => setLoading2(false))\n            setUseEffectBool(false)\n        }\n        setTimeout(() => {\n            imgPhotoGet(id).then(data => setImgPhoto(data))\n        },1500);\n\n        //imgPhotoGet(id).then(data => setImgPhoto(data)).finally(() => setLoading2(false))\n        fetchPromo(id).then(data => setPromo(data)).finally(() => setLoading3(false))\n\n    }, [imgPhoto])\n    if (loading1 && loading2 && loading3 && loading4) {return <Spinner animation={\"grow\"}/>}\n\n    const selectFile = e => {\n        setUserId(user.checkUser.id)\n        setUserdataId(user.checkUser.userdataid)\n        setFile(e.target.files[0])\n    }\n\n    const renderer = (a) => {\n        if (userdata.userData.userId === a) {\n            return false\n        }\n        else {\n            return true\n        }\n    };\n\n    // const addImage= async () => {\n    //     try{ await postDataImg(userId, userdataId, file);\n    //         alert(\"Рейтинг изменен на: \" + file)}\n    //     catch (e) {alert(e.response.data.message)}}\n\n    const addImage = () => {\n        const formData = new FormData()\n        formData.append('id', userId)\n        formData.append('userdataId', userdataId)\n        formData.append('img', file)\n        createImg(formData).then(data => setImgPhoto(data))\n        //setImgPhoto(createImg(formData))\n        // if (loading3) {return <Spinner animation={\"grow\"}/>}\n        setFile('')\n        //setLoading2(true)\n    }\n\n    const dataRating = async () => {\n        try{ await postDataRating(userId, userdataId, ratingValue);\n             alert(\"Рейтинг изменен на: \" + ratingValue)}\n        catch (e) {alert(e.response.data.message)}}\n\n    const dataTwitch = async () => {\n        try{ await postDataTwitch(userId, userdataId, TwitchValue);\n            alert(\"Twitch изменен на: \" + TwitchValue)}\n        catch (e) {alert(e.response.data.message)}}\n\n    const dataFacebook = async () => {\n        try{ await postDataFacebook(userId, userdataId, FacebookValue);\n            alert(\"Facebook изменен на: \" + FacebookValue)}\n        catch (e) {alert(e.response.data.message)}}\n\n    const dataInstagram = async () => {\n        try{ await postDataInstagram(userId, userdataId, InstagramValue);\n            alert(\"Instagram изменен на: \" + InstagramValue)}\n        catch (e) {alert(e.response.data.message)}}\n\n    const dataTelegram = async () => {\n        try{ await postDataTelegram(userId, userdataId, TelegramValue);\n            alert(\"Telegram изменен на: \" + TelegramValue)}\n        catch (e) {alert(e.response.data.message)}}\n\n    const dataVK = async () => {\n        try{ await postDataVK(userId, userdataId, VKValue);\n            alert(\"VK изменен на: \" + VKValue)}\n        catch (e) {alert(e.response.data.message)}}\n\n    const dataOK = async () => {\n        try{ await postDataOK(userId, userdataId, OKValue);\n            alert(\"OK изменен на: \" + OKValue)}\n        catch (e) {alert(e.response.data.message)}}\n\n    return (\n        <Container className=\"mt-3\">\n            <Row>\n                <Col style={{maxWidth: '33%'}}>\n                    <div className=\"d-flex flex-column align-items-left\">\n                        <h2>{device.username}</h2>\n                        <h3>Аккаунт создан </h3>\n                        {\n                            moment(device.datecreated).locale(\"ru\").format('llll')\n                        }\n                        <h5>Привлеченных пользователей: {promo}</h5>\n                        <h2 className=\"mt-5\">BET: {device.bet}</h2>\n                        <h5>(ставки временно не работают)</h5>\n                    </div>\n                </Col>\n                <Col style={{maxWidth: '33%'}}>\n                    <div className=\"d-flex flex-column align-items-center\">\n                        <h2>Rating</h2>\n                        <div\n                            className=\"d-flex align-items-center justify-content-center\"\n                            style={{background: `url(${bigStar}) no-repeat center center`, width:240, height: 240, backgroundSize: 'cover', fontSize:24}}\n                        >\n                            <input disabled={renderer(device.userId)} style={{backgroundColor: 'transparent', textAlign: 'center', border: 'none', width: 120,fontSize: 50}} type=\"text\"\n                                   defaultValue={device.rating}\n                                   onClick={() => {\n                                       setUserId(user.checkUser.id)\n                                       setUserdataId(user.checkUser.userdataid);\n                                   }}\n                                   onInput={() => {\n                                       setUserId(user.checkUser.id)\n                                       setUserdataId(user.checkUser.userdataid);\n                                   }}\n                                   onChange={(event) => setRatingValue(event.target.value)}\n                                   onKeyPress={event => {\n                                       if (event.key === \"Enter\") {\n                                           return dataRating()\n                                       }\n                                   }}\n                            />\n                        </div>\n                    </div>\n                </Col>\n\n                <Col style={{maxWidth: '33%'}}>\n                    <div className=\"d-flex flex-column align-items-end\">\n                        <Image style={{ border: '5px solid lightgray'}} width={300} height={300}\n                               src={device.img === null ? process.env.REACT_APP_API_URL + 'photo/' + 'photo.jpg' : process.env.REACT_APP_API_URL + 'photo/' + imgPhoto}/>\n                        <Form.Control style={{maxWidth: '80%'}}  className=\"mt-3\"\n                            hidden={renderer(device.userId)}\n                            type=\"file\"\n                            onChange={selectFile}\n                        />\n                        <Button variant=\"outline-secondary\" size=\"sm\" className=\"mt-2\"\n                            hidden={renderer(device.userId)}\n                            // onFocus={() => {\n                            //     setUserId(user.checkUser.id)\n                            //     setUserdataId(user.checkUser.userdataid)\n                            // }}\n                            onClick={addImage}\n                        >Добавить\n                        </Button>\n                    </div>\n                </Col>\n            </Row>\n\n\n            <Row className=\"d-flex flex-column m-3\">\n                <h2>Info:</h2>\n\n                <h4><Link to={{ pathname: device.twitch }} target=\"_blank\">Twitch: </Link>\n                    <input disabled={renderer(device.userId)} style={{backgroundColor: 'transparent', textAlign: 'left', border: 'none', width: 520,fontSize: 24}} type=\"text\"\n                           defaultValue={device.twitch}\n                           onClick={() => {\n                               setUserId(user.checkUser.id)\n                               setUserdataId(user.checkUser.userdataid);\n                           }}\n                           onInput={() => {\n                               setUserId(user.checkUser.id)\n                               setUserdataId(user.checkUser.userdataid);\n                           }}\n                           onChange={(event) => setTwitchValue(event.target.value)}\n                           onKeyPress={event => {\n                               if (event.key === \"Enter\") {\n                                   return dataTwitch()\n                               }\n                           }}\n                /></h4>\n                <h4><Link to={{ pathname: device.facebook }} target=\"_blank\">Facebook: </Link>\n                    <input disabled={renderer(device.userId)} style={{backgroundColor: 'transparent', textAlign: 'left', border: 'none', width: 520,fontSize: 24}} type=\"text\"\n                           defaultValue={device.facebook}\n                           onClick={() => {\n                               setUserId(user.checkUser.id)\n                               setUserdataId(user.checkUser.userdataid);\n                           }}\n                           onInput={() => {\n                               setUserId(user.checkUser.id)\n                               setUserdataId(user.checkUser.userdataid);\n                           }}\n                           onChange={(event) => setFacebookValue(event.target.value)}\n                           onKeyPress={event => {\n                               if (event.key === \"Enter\") {\n                                   return dataFacebook()\n                               }\n                           }}\n                    /></h4>\n                <h4><Link to={{ pathname: device.instagram }} target=\"_blank\">Instagram: </Link>\n                    <input disabled={renderer(device.userId)} style={{backgroundColor: 'transparent', textAlign: 'left', border: 'none', width: 520,fontSize: 24}} type=\"text\"\n                           defaultValue={device.instagram}\n                           onClick={() => {\n                               setUserId(user.checkUser.id)\n                               setUserdataId(user.checkUser.userdataid);\n                           }}\n                           onInput={() => {\n                               setUserId(user.checkUser.id)\n                               setUserdataId(user.checkUser.userdataid);\n                           }}\n                           onChange={(event) => setInstagramValue(event.target.value)}\n                           onKeyPress={event => {\n                               if (event.key === \"Enter\") {\n                                   return dataInstagram()\n                               }\n                           }}\n                    /></h4>\n                <h4><Link to={{ pathname: device.telegram }} target=\"_blank\">Telegram: </Link>\n                    <input disabled={renderer(device.userId)} style={{backgroundColor: 'transparent', textAlign: 'left', border: 'none', width: 520,fontSize: 24}} type=\"text\"\n                           defaultValue={device.telegram}\n                           onClick={() => {\n                               setUserId(user.checkUser.id)\n                               setUserdataId(user.checkUser.userdataid);\n                           }}\n                           onInput={() => {\n                               setUserId(user.checkUser.id)\n                               setUserdataId(user.checkUser.userdataid);\n                           }}\n                           onChange={(event) => setTelegramValue(event.target.value)}\n                           onKeyPress={event => {\n                               if (event.key === \"Enter\") {\n                                   return dataTelegram()\n                               }\n                           }}\n                    /></h4>\n                <h4><Link to={{ pathname: device.vk }} target=\"_blank\">VK: </Link>\n                    <input disabled={renderer(device.userId)} style={{backgroundColor: 'transparent', textAlign: 'left', border: 'none', width: 520,fontSize: 24}} type=\"text\"\n                           defaultValue={device.vk}\n                           onClick={() => {\n                               setUserId(user.checkUser.id)\n                               setUserdataId(user.checkUser.userdataid);\n                           }}\n                           onInput={() => {\n                               setUserId(user.checkUser.id)\n                               setUserdataId(user.checkUser.userdataid);\n                           }}\n                           onChange={(event) => setVKValue(event.target.value)}\n                           onKeyPress={event => {\n                               if (event.key === \"Enter\") {\n                                   return dataVK()\n                               }\n                           }}\n                    /></h4>\n                <h4><Link to={{ pathname: device.ok }} target=\"_blank\">OK: </Link>\n                    <input disabled={renderer(device.userId)} style={{backgroundColor: 'transparent', textAlign: 'left', border: 'none', width: 520,fontSize: 24}} type=\"text\"\n                           defaultValue={device.ok}\n                           onClick={() => {\n                               setUserId(user.checkUser.id)\n                               setUserdataId(user.checkUser.userdataid);\n                           }}\n                           onInput={() => {\n                               setUserId(user.checkUser.id)\n                               setUserdataId(user.checkUser.userdataid);\n                           }}\n                           onChange={(event) => setOKValue(event.target.value)}\n                           onKeyPress={event => {\n                               if (event.key === \"Enter\") {\n                                   return dataOK()\n                               }\n                           }}\n                    /></h4>\n\n                <h4 className=\"mt-3\">Партнёрская ссылка: {process.env.REACT_APP_NAME + device.username}\n                    <Button variant=\"outline-secondary\" size=\"sm\" className=\"ml-3\"\n                        onClick={() => {navigator.clipboard.writeText(process.env.REACT_APP_NAME + device.username).then()}}\n                    >скопировать</Button>\n                </h4>\n                <h4 className=\"mt-3\">Достижения:</h4>\n                <h5>Побед:</h5>\n            </Row>\n        </Container>\n    );\n});\n\nexport default DevicePage;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/Auth.js",["232","233","234","235"],"import React, {useContext, useEffect, useState} from 'react';\nimport {Container, Form} from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport {NavLink, useLocation, useHistory} from \"react-router-dom\";\nimport {LOGIN_ROUTE, REGISTRATION_ROUTE, SHOP_ROUTE} from \"../utils/consts\";\nimport {check, login, registration} from \"../http/userAPI\";\nimport {observer} from \"mobx-react-lite\";\nimport {Context} from \"../index\";\nimport {checkUserData} from \"../http/userDataAPI\";\nimport ReCAPTCHA from \"react-google-recaptcha\"\nimport './../App.css';\n\nconst Auth = observer((props) => {\n    const {user, userdata} = useContext(Context)\n    const location = useLocation()\n    const history = useHistory()\n    const [img, setFile] = useState(null)\n\n    const isLogin = location.pathname === LOGIN_ROUTE\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const [username, setUsername] = useState('')\n    const [rating, setRating] = useState('')\n    const [twitch, setTwitch] = useState('')\n    const [facebook, setFacebook] = useState('')\n    const [instagram, setInstagram] = useState('')\n    const [telegram, setTelegram] = useState('')\n    const [vk, setVK] = useState('')\n    const [ok, setOK] = useState('')\n    const [reCAPTCHA, setReCAPTCHA] = useState(true)\n\n    // const selectFile = e => {\n    //     setFile(e.target.files[0])\n    // }\n\n    // useEffect(() => {\n    //     checkUserData(user.checkUser.id).then(data => userdata.setUserData(data))\n    //     check().then(data => user.setUser(data))\n    // }, [])\n\n    const onChange = (value) => {\n        //console.log(\"Captcha value:\", value)\n        setReCAPTCHA(false)\n    }\n\n    const click = async () => {\n        try {\n            let dataSet;\n            if (isLogin) {\n                localStorage.removeItem('token')\n                dataSet = await login(email, password);\n            } else {\n                const role = \"USER\"\n                var testEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i\n                if (testEmail.test(email)){\n                    if(username.length <= 25) {\n                         let regexp = /^[A-Za-zА-Яа-я0-9_-]+$/i\n                         //let regexp = /^[A-Za-z0-9_-]+$/i\n                         if(regexp.test(username)) {\n                            dataSet = await registration(email, password, username, rating, twitch, facebook, instagram, telegram, vk, ok, role, props.promo);\n                            await checkUserData(user.checkUser.id).then(data => userdata.setUserData(data))\n                         }else{\n                             return alert(\"Login должен состоять из английских букв, разрешённы: цифры,знак минус и нижнее подчеркиванее\")\n                         }\n                    }else{\n                        return alert(\"Login должен содержать не более 25 символов\")\n                    }\n                }else{\n                    return alert(\"Укажите правильный формат email\")\n                }\n            }\n            user.setUser(dataSet)\n            user.setIsAuth(true)\n            checkUserData(user.checkUser.id).then(data => userdata.setUserData(data))\n            history.push(SHOP_ROUTE)\n        } catch (e) {\n            alert(e.response.data.message)\n        }\n    }\n\n    return (\n        <Container\n            // className=\"d-flex justify-content-center align-items-center\"\n            className=\"d-flex h-100 justify-content-center align-self-center\"\n            style={{height: window.innerHeight - 54}}\n        >\n            <Card style={{width: 600}} className=\"p-5\">\n                <h2 className=\"m-auto\">{isLogin ? 'Авторизация' : \"Регистрация\"}</h2>\n                <Form className=\"d-flex flex-column\">\n                    {isLogin ?\n                        <div>\n                        <Form.Control\n                            className=\"mt-3\"\n                            placeholder=\"Логин\"\n                            value={email}\n                            onChange={e => setEmail(e.target.value)}\n                        />\n                        <Form.Control\n                            className=\"mt-3\"\n                            placeholder=\"Пароль\"\n                            value={password}\n                            onChange={e => setPassword(e.target.value)}\n                            type=\"password\"\n                        />\n                        </div>\n                    :\n                        <div>\n                            <Form.Control\n                                className=\"mt-3 block-example border border-primary\"\n                                placeholder=\"Email *\"\n                                value={email}\n                                onChange={e => setEmail(e.target.value)}\n                                type=\"email\"\n                            />\n                            <Form.Control\n                                className=\"mt-3 block-example border border-primary\"\n                                placeholder=\"Password *\"\n                                value={password}\n                                onChange={e => setPassword(e.target.value)}\n                                type=\"password\"\n                            />\n\n                            <Form.Control\n                                className=\"mt-3 block-example border border-primary\"\n                                placeholder=\"Login Hota * (Не совпадение login Hota = бан)\"\n                                value={username}\n                                onChange={e => setUsername(e.target.value)}\n                            />\n\n                            <Form.Control\n                                className=\"mt-3 block-example border border-primary\"\n                                placeholder=\"Ваш рейтинг в Heroes *\"\n                                value={rating}\n                                onChange={e => setRating(e.target.value)}\n                            />\n                            {/*<Form.Control*/}\n                            {/*    className=\"mt-3\"*/}\n                            {/*    type=\"file\"*/}\n                            {/*    onChange={selectFile}*/}\n                            {/*/>*/}\n                            {/*Ваше фото*/}\n                            <Form.Control\n                                className=\"mt-3 block-example border border-primary\"\n                                placeholder=\"Twitch * (Link http://twitch.tv/....)\"\n                                value={twitch}\n                                onChange={e => setTwitch(e.target.value)}\n                            />\n                            <br/>\n                            Необязательно:\n                            <Form.Control\n                                className=\"mt-3\"\n                                placeholder=\"Facebook\"\n                                value={facebook}\n                                onChange={e => setFacebook(e.target.value)}\n                            />\n                            <Form.Control\n                                className=\"mt-3\"\n                                placeholder=\"Instagram\"\n                                value={instagram}\n                                onChange={e => setInstagram(e.target.value)}\n                            />\n                            <Form.Control\n                                className=\"mt-3\"\n                                placeholder=\"Telegram\"\n                                value={telegram}\n                                onChange={e => setTelegram(e.target.value)}\n                            />\n                            <Form.Control\n                                className=\"mt-3\"\n                                placeholder=\"VK\"\n                                value={vk}\n                                onChange={e => setVK(e.target.value)}\n                            />\n                            <Form.Control\n                                className=\"mt-3\"\n                                placeholder=\"OK\"\n                                value={ok}\n                                onChange={e => setOK(e.target.value)}\n                            />\n                        </div>\n                    }\n                    <Row className=\"d-flex justify-content-between mt-3 pl-3 pr-3\">\n                        {isLogin ?\n                            <div>\n                                Нет аккаунта? <NavLink to={REGISTRATION_ROUTE}>Зарегистрируйся!</NavLink>\n                            </div>\n                            :\n                            <div>\n                                Есть аккаунт? <NavLink to={LOGIN_ROUTE}>Войдите!</NavLink>\n                            </div>\n                        }\n                        <ReCAPTCHA\n                            sitekey=\"6Ld-qr0bAAAAAEXsi5tKq5g6Ddwg0oG6Aqmo9mmA\"\n                            onChange={onChange}\n                        />\n                        <Button disabled={reCAPTCHA}\n                            variant={\"outline-success\"}\n                            onClick={click}\n                        >\n                            {isLogin ? 'Войти' : 'Регистрация'}\n                        </Button>\n                    </Row>\n\n                </Form>\n            </Card>\n        </Container>\n    );\n});\n\nexport default Auth;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/Shop.js",["236","237","238","239","240","241","242","243","244","245","246","247","248","249","250"],"import React, {useContext, useEffect, useRef, useState} from 'react';\nimport {Container, Spinner} from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport TypeBar from \"../components/TypeBar\";\nimport BrandBar from \"../components/BrandBar\";\nimport DeviceList from \"../components/DeviceList\";\nimport {observer} from \"mobx-react\";\nimport {Context} from \"../index\";\nimport {fetchBrands, fetchDevices, fetchTypes} from \"../http/deviceAPI\";\nimport Pages from \"../components/Pages\";\nimport DeviceListStart from \"../components/DeviceListStart\";\nimport Footer from \"../components/Footer\";\nimport DeviceListStartWin from \"../components/DeviceListStartWin\";\nimport UseReff from \"../components/lern/UseReff\";\nimport {checkUserData} from \"../http/userDataAPI\";\n//import './../App.css';\n\n\nconst Shop = observer(() => {\n    const {device, userdata, user} = useContext(Context)\n    const [loading, setLoading] = useState(true)\n    const [loading2, setLoading2] = useState(true)\n    const [callbackTypeBar, setCallbackTypeBar] = useState(false)\n    const [state, setState] = useState({ num: 0 });\n\n    useEffect(() => {\n        const a = device.selectedType.id\n        if(device.selectedType.id !== undefined) {\n            if(callbackTypeBar === false) {\n                fetchDevices(device.selectedType.id, device.selectedBrand.id, device.page, 2).then(data => {\n                    device.setDevices(data.devices.rows)\n                    device.setTableName(data.tableName)\n                    device.setBaseCreatedWin(data.baseCreatedWin)\n                    device.setTotalCount(data.count)\n                })\n            }\n        }\n        // const timer = setTimeout(() => setState({ num: state.num + 1 }), 3000);\n        // return () => clearTimeout(timer);\n    }, [device.page, device.selectedType, device.selectedBrand, state])\n\n    // if (loading) {\n    //     return <Spinner animation={\"grow\"}/>\n    // }\n    // const renderer = ({ years, months, days, hours, minutes, seconds, completed }) => {\n    //     if (completed) {\n    //         return <DeviceListStart/>\n    //     }\n    //     else {\n    //         return <div>\n    //             <span>\n    //                 До старта: {years}{months} {days} день {hours} час {minutes} минут {seconds} секунд\n    //             </span>\n    //             {/*<DeviceList/>*/}\n    //         </div>;\n    //     }\n    // };\n\n    const updateData = (value) => {\n        setCallbackTypeBar(value)\n    }\n\n    const isEmptyObject = (obj) => {\n        for (let i in obj) {\n            if (obj.hasOwnProperty(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    return (\n        <Container style={{maxWidth: '100%'}}>\n            {/*<UseReff/>*/}\n            {/*{console.log(\"222222222222 \"+ device.brands[1].id)}*/}\n            <Row className=\"sm-0\">\n                <Col style={{maxWidth: '20%'}}>\n                    <TypeBar updateData={updateData} />\n                    {/*<PayPal/>*/}\n                </Col >\n                <Col style={{maxWidth: '80%'}}>\n                    {isEmptyObject(device.selectedType) ?  \"\" :  <BrandBar/> }\n\n                    {/*{console.log(device.selectedType.nametype)}*/}\n                    {/*{ moment(device.selectedType.name).isSameOrBefore(moment().format('YYYY-MM-DD HH:mm:ss'),'seconds')*/}\n                    { callbackTypeBar === false ?\n                        device.tableName\n                        ?\n                        <div style={{maxWidth: '100%'}}>\n                            <DeviceListStart/>\n                            {device.baseCreatedWin === true ? <DeviceListStartWin load={device.baseCreatedWin} /> : \"\"}\n                            {/*Действующий чемпионат: {' '+ moment(device.typesStart).format('YYYY-MM-DD HH:mm')}*/}\n                        </div>\n                        :\n                        <div style={{maxWidth: '100%'}}>\n\n                            {isEmptyObject(device.selectedType) ?  \"\" :  <DeviceList /> }\n\n                            {/*Зарегистрированые игроки: {\" \"}*/}\n                            {/*{*/}\n                            {/*    moment(device.selectedType.name).format('YYYY-MM-DD HH:mm:ss')*/}\n                            {/*}*/}\n                            {/*<Countdown*/}\n                            {/*    date={moment(device.selectedType.name) + 1000}*/}\n                            {/*    renderer={renderer}*/}\n                            {/*/>*/}\n                            {/*<TypeList/>*/}\n                        </div>\n                        :\n                        \"\"\n                    }\n                    <Pages/>\n\n                </Col>\n            </Row>\n\n            <Footer/>\n        </Container>\n    );\n});\n\nexport default Shop;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/Basket.js",[],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/Champ.js",["251","252"],"import React, {useState, useEffect, useContext} from 'react';\nimport {Button, Container} from \"react-bootstrap\";\nimport CreateBrand from \"../components/modals/CreateBrand\";\nimport CreateType from \"../components/modals/CreateType\";\nimport CreateTableChamp from \"../components/modals/CreateTableChamp\";\nimport CreateChampLap from \"../components/modals/CreateChampLap\";\nimport CreateChampWin from \"../components/modals/CreateChampWin\";\n\n\nconst Champ = () => {\n\n    const [brandVisible, setBrandVisible] = useState(false)\n    const [typeVisible, setTypeVisible] = useState(false)\n    const [createChampTable, setCreateChampTable] = useState(false)\n    const [createChampLap, setCreateChampLap] = useState(false)\n    const [createChampWin, setCreateChampWin] = useState(false)\n\n    return (\n        <Container className=\"d-flex flex-column\">\n            <Button\n                variant={\"outline-dark\"}\n                className=\"mt-4 p-2\"\n                onClick={() => setTypeVisible(true)}\n            >\n                Add types\n            </Button>\n            <Button\n                variant={\"outline-dark\"}\n                className=\"mt-4 p-2\"\n                onClick={() => setBrandVisible(true)}\n            >\n                Add brands\n            </Button>\n            <Button\n                variant={\"outline-dark\"}\n                className=\"mt-4 p-2\"\n                onClick={() => setCreateChampTable(true)}\n            >\n                Создание таблицы рандомов\n            </Button>\n            <Button\n                variant={\"outline-dark\"}\n                className=\"mt-4 p-2\"\n                onClick={() => setCreateChampLap(true)}\n            >\n                Создание круга рандома\n            </Button>\n\n            <Button\n                variant={\"outline-dark\"}\n                className=\"mt-4 p-2\"\n                onClick={() => setCreateChampWin(true)}\n            >\n                Users win\n            </Button>\n\n            <CreateBrand show={brandVisible} onHide={() => setBrandVisible(false)}/>\n            <CreateType show={typeVisible} onHide={() => setTypeVisible(false)}/>\n            <CreateTableChamp show={createChampTable} onHide={() => setCreateChampTable(false)}/>\n            <CreateChampLap show={createChampLap} onHide={() => setCreateChampLap(false)}/>\n            <CreateChampWin show={createChampWin} onHide={() => setCreateChampWin(false)}/>\n\n        </Container>\n    );\n};\n\nexport default Champ;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/Admin.js",["253"],"import React, {useContext, useState} from 'react';\nimport {Button, Container} from \"react-bootstrap\";\n//import CreateBrand from \"../components/modals/CreateBrand\";\nimport CreateDevice from \"../components/modals/CreateDevice\";\nimport {Context} from \"../index\";\nimport {DEVICE_ROUTE} from \"../utils/consts\";\nimport {useHistory} from \"react-router-dom\";\n//import CreateType from \"../components/modals/CreateType\";\n\n\nconst Admin = () => {\n    const {userdata, user} = useContext(Context)\n    const history = useHistory()\n    const [deviceVisible, setDeviceVisible] = useState(false)\n\n\n    return (\n        <Container className=\"d-flex flex-column\">\n\n            <Button\n                variant={\"outline-dark\"}\n                className=\"mt-4 p-2\"\n                onClick={() => history.push(DEVICE_ROUTE + '/' + userdata.userData.id)}\n            >\n                {userdata.userData.username}\n            </Button>\n\n            <Button\n                variant={\"outline-dark\"}\n                className=\"mt-4 p-2\"\n                onClick={() => setDeviceVisible(true)}\n            >\n                Registration Heroes Hota\n            </Button>\n\n            <CreateDevice show={deviceVisible} onHide={() => setDeviceVisible(false)}/>\n\n        </Container>\n    );\n};\n\nexport default Admin;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/DeviceItem.js",[],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/DeviceListStart.js",["254","255","256","257","258","259","260","261","262","263","264"],"import React, {useContext, useEffect, useState} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Context} from \"../index\";\nimport Card from \"react-bootstrap/Card\";\nimport {DEVICE_ROUTE, QIWI_ROUTE} from \"../utils/consts\";\nimport {VS_ROUTE} from \"../utils/consts\";\nimport Image from \"react-bootstrap/Image\";\nimport star from \"../assets/star.png\";\nimport {useHistory} from \"react-router-dom\";\nimport {fetchDevices, fetchVSDevice, oppCheck, postDataTimeGame, userCheck} from \"../http/deviceAPI\";\nimport {Button, Container, Row, Spinner} from \"react-bootstrap\";\nimport moment from \"moment\";\nimport './../App.css';\nimport CreateQiwiTypesDonate from \"./CreateQiwiTypesDonate\";\n\n\n\n\n\nconst DeviceListStart = observer(() => {\n    const [loading, setLoading] = useState(true)\n    const {user, device} = useContext(Context)\n    const history = useHistory()\n    const [state, setState] = useState({ num: 0 });\n    // const [qiwiVisible, setQiwiVisible] = useState(false)\n\n    const [datePicker, setDatePicker] = useState(new Date());\n\n    const [dataTimeUserId, setDateTimeUserId] = useState(0)\n    const [typesName, setTypesName] = useState(0)\n    const [brandName, setBrandName] = useState(0)\n    const [lap, setLap] = useState(0)\n\n    const [colorBtnUser, setColorBtnUser] = useState({})\n    const [colorBtnOpp, setColorBtnOpp] = useState({})\n    const [deviceData, setDeviceData] = useState([])\n\n    const [dataStart, setDataStart] = useState({})\n\n    const [sortAZ, setSortAZ] = useState(true)\n\n    useEffect(() => {\n        fetchDevices(device.selectedType.id, device.selectedBrand.id, device.page, 2).then(data => {\n            device.setDevices(data.devices.rows)\n            device.setTableName(data.tableName)\n            device.setTotalCount(data.count)\n            setDeviceData(data.devices.rows)\n            // const newArr = [...data.devices.rows]\n            // setDeviceData(newArr)\n            const a = 0\n            // setDeviceData(newArr)\n        }).finally(() => setLoading(false))\n\n        // const timer = setTimeout(() => setState({ num: state.num + 1 }), 2000);\n        // return () => clearTimeout(timer);\n    }, [colorBtnUser, colorBtnOpp, datePicker, dataStart])\n\n    if (loading) {\n        return <Spinner animation={\"grow\"}/>\n    }\n\n    const addCheckUser = async (userId, checkUserButton, typeId, brandId, lap) => {\n        await userCheck(userId, checkUserButton, typeId, brandId, lap).then(data => setColorBtnUser(data));\n    }\n\n    const addCheckOpp = async (userId, checkUserButton, typeId, brandId, lap) => {\n        await oppCheck(userId, checkUserButton, typeId, brandId, lap).then(data => setColorBtnOpp(data));\n    }\n\n    const rendererUser = (userId, oppId, oppCheck) => {\n        if (user.checkUser.id === userId && oppCheck === false) {\n            return false\n        } else {\n            return true\n        }\n    };\n\n    const rendererOpp = (userId, oppId, userCheck) => {\n        if (user.checkUser.id === oppId && userCheck === false) {\n            return false\n        } else {\n            return true\n        }\n    };\n\n    const rendererLap = (a) => {\n        if (a === 1) {return '#E3E3E3'}\n        else if (a === 2) {return '#FFF9C4'}\n        else if (a === 3) {return '#B3E5FC'}\n        else if (a === 4) {return '#FFCDD2'}\n        else if (a === 5) {return '#DCEDC8'}\n        else if (a === 6) {return '#c4d1ff'}\n        else if (a === 7) {return '#f4c4ff'}\n        else if (a === 8) {return '#fdffc4'}\n        else if (a === 9) {return '#c4ffe7'}\n        else if (a === 10) {return '#ffc4d7'}\n        else{return '#ffdec4'}\n    };\n\n    const dateStartRender = (a, b) => {\n        if (user.checkUser.id === a || user.checkUser.id === b) {\n            return false\n        }\n        else {\n            return true\n        }\n    };\n\n    const dateTimeGame = async () => {\n        if(typesName !== 0) {\n            try{\n                await postDataTimeGame(typesName, brandName, dataTimeUserId, datePicker, lap).then(data => setDataStart(data));\n                    alert(\"Дата изменена на: \" + datePicker)}\n            catch (e) {\n                alert(e.response.data.message)\n            }\n        }\n    }\n\n    const renderMassiveComponent = () => {\n        //const newArr = [...deviceData];\n        // setDeviceData(newArr);\n        //return newArr\n    };\n\n    return (\n            <div style={{maxWidth: '100%'}} >\n            {device.selectedType.start !== null ? <CreateQiwiTypesDonate/> : \"\"}\n            <div>MSK. Формат времени: {moment().format('YYYY-MM-DD HH:mm')}  (Один этап длится: 1-3 дня)</div>\n                {}\n            {   //deviceData.rows.map((item) => ({ ...item }))\n                // .sort((a, b) => a.lap > b.lap ? 1 : -1)\n                //device.devices.map((device, index) =>\n\n                deviceData.map((device, index) =>\n                <div key={index} className=\"container\" style={{maxWidth: '100%'}}>\n                    <div className=\"row p-1 mb-1\" style={{background: rendererLap(device.lap) }} key={device.id} device={device}>\n                        <div className=\"col-sm-0 mr-1 \" style={{fontSize: 20, color: '#131728' }}>\n                            {device.lap}\n                        </div>\n                        <div>\n                            <input style={{maxWidth: '135px', minWidth: '135px'}}\n                                type=\"text\"\n                                disabled={dateStartRender(device.userId, device.oppUserId)}\n                                defaultValue={device.dateMatch === null\n                                    ?\n                                    ''\n                                    :\n                                    moment(device.dateMatch).format('YYYY-MM-DD HH:mm')\n                                }\n                                //placeholder={moment(device.dateGame).format('YYYY-MM-DD HH:mm')}\n                                onChange={(event) => setDatePicker(event.target.value)}\n                                onClick={()=> {\n                                    setDateTimeUserId(user.checkUser.id)\n                                    setTypesName(device.typeId)\n                                    setBrandName(device.brandId)\n                                    setLap(device.lap)\n                                }}\n                                onInput={() => {\n                                    setDateTimeUserId(user.checkUser.id)\n                                    setTypesName(device.typeId)\n                                    setBrandName(device.brandId)\n                                    setLap(device.lap)\n                                }}\n                                onKeyPress={event => {\n                                    if (event.key === \"Enter\") {\n                                        // alert.show(\"Дата изменена\")\n                                        return dateTimeGame()\n                                    }\n                                }}\n                            >\n                            </input>\n                        </div>\n                        <div className=\"ml-2\" style={{maxWidth: '100px', minWidth: '70px'}}>{device.name}</div>\n                        <div className=\"col-sm-1.1\">\n                            <Button\n                                    style={{ background: device.userCheck ? 'red' : 'green', minWidth: '70px', maxWidth: '70px'}}\n                                    disabled={rendererUser(device.userId, device.oppUserId, device.oppCheck) }\n                                    onClick={()=>{addCheckUser(device.userId, true, device.typeId, device.brandId, device.lap).then()}}>\n                                    {\n                                        device.userCheck ? 'loss' : (device.oppCheck ? 'victory' : 'wait')\n                                    }\n                            </Button>\n                        </div>\n                        <div className=\"icon-twitch\">11</div>\n                        <div className=\"col-sm\" style={{minWidth: '150px'}}>\n                            <Card border={\"light\"}>\n                                <div style={{cursor: 'pointer', lineHeight: 1}}  className=\"text-black-20 d-flex justify-content-center\"\n                                     onClick={() => history.push(DEVICE_ROUTE + '/' + device.userdatumId)} >{device.username}</div>\n\n                                <div style={{lineHeight: 1}} className=\"text-black-20 d-flex justify-content-center\">\n                                    <Image width={14} height={14} src={star}/>\n                                    {device.rating}\n                                    <Image width={14} height={14} src={star}/>\n                                </div>\n                            </Card>\n                        </div>\n                        <div className=\"text-primary\" style={{cursor: 'pointer'}}  onClick={() => history.push(VS_ROUTE + '/' + device.typeId + '/' + device.vsid)} >VS</div>\n                        <div className=\"col-sm\" style={{minWidth: '150px'}}>\n                            <Card border={\"light\"}>\n                                    <div style={{cursor: 'pointer', lineHeight: 1}}  className=\"text-black-20 d-flex justify-content-center\"\n                                         onClick={() => history.push(DEVICE_ROUTE + '/' + device.userdatumIdOpp)} >{device.oppUsername}</div>\n                                    <div style={{lineHeight: 1}} className=\"text-black-20 d-flex justify-content-center\">\n                                        <Image width={14} height={14} src={star}/>\n                                        <div>{device.oppRating}</div>\n                                        <Image width={14} height={14} src={star}/>\n                                    </div>\n                            </Card>\n                        </div>\n                        <div className=\"col-sm-1.1\">\n                            <Button\n                                style={{ background: device.oppCheck? 'red' : 'green', minWidth: '70px', maxWidth: '70px' }}\n                                disabled={rendererOpp(device.oppUserId, device.oppUserId, device.userCheck)}\n                                onClick={()=>{addCheckOpp(device.oppUserId, true, device.typeId, device.brandId, device.lap).then()}}>\n                                {\n                                    device.oppCheck ? 'loss' : (device.userCheck ? 'victory' : 'wait')\n                                }\n                            </Button>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n});\n\nexport default DeviceListStart;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/modals/CreateType.js",[],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/modals/CreateBrand.js",["265","266"],"import React, {useState} from 'react';\nimport Modal from \"react-bootstrap/Modal\";\nimport {Button, Form} from \"react-bootstrap\";\nimport {createBrand, createDevice, createType} from \"../../http/deviceAPI\";\n\nconst CreateBrand = ({show, onHide}) => {\n    const [brandId, setIdBrand] = useState('')\n    const [value, setValue] = useState('')\n\n    // const addBrand = () => {\n    //     createBrand({idbrand, name: value}).then(data => {\n    //         setValue('')\n    //         setIdBrand(0)\n    //         onHide()\n    //     })\n    // }\n\n    const addBrand = async () => {\n        try {\n            const formData = new FormData()\n            formData.append('brandId', brandId)\n            formData.append('name', value)\n            await createBrand(formData).then(data => onHide())\n        } catch (e) {\n            alert(e.response.data.message)\n        }\n    }\n\n\n    return (\n        <Modal\n            show={show}\n            onHide={onHide}\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Добавить тип\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form className=\"mb-3\">\n                    <Form.Control\n                        value={brandId}\n                        onChange={e => setIdBrand(e.target.value)}\n                        placeholder={\"id types\"}\n                    />\n                </Form>\n                <Form>\n                    <Form.Control\n                        value={value}\n                        onChange={e => setValue(e.target.value)}\n                        placeholder={\"Введите название типа\"}\n                        onKeyPress={event => {\n                            if (event.key === \"Enter\") {\n                                return addBrand()\n                            }\n                        }}\n                    />\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"outline-danger\" onClick={onHide}>Закрыть</Button>\n                <Button variant=\"outline-success\" onClick={addBrand}>Добавить</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default CreateBrand;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/Pages.js",[],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/DeviceList.js",[],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/BrandBar.js",["267"],"import React, {useContext} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Context} from \"../index\";\nimport {Button, Card, Row} from \"react-bootstrap\";\n\nconst BrandBar = observer(() => {\n    const {device} = useContext(Context)\n\n    const addBrandAll = () => {\n        device.setSelectedBrand(device.brands)\n    }\n\n    const idBrandBarIfidname = () => {\n        return true\n        // if(device.brands.idname === device.types.id){\n        //     return true\n        // }else{\n        //     return false\n        // }\n    }\n\n\n\n    return (\n        <Row className=\"d-flex\" >\n\n             {/*{(() => {*/}\n             {/*    if (idBrandBarIfidname)  {*/}\n             {/*        return (*/}\n             {/*            device.brands.map(brand =>*/}\n             {/*                <Card variant={\"outline-success\"}*/}\n             {/*                      style={{cursor:'pointer'}}*/}\n             {/*                      key={brand.id}*/}\n             {/*                      className=\"p-3\"*/}\n             {/*                      onClick={() => device.setSelectedBrand(brand)}*/}\n             {/*                      border={brand.id === device.selectedBrand.id ? 'danger' : 'light'}*/}\n             {/*                >*/}\n             {/*                    {brand.name}*/}\n             {/*                </Card>*/}\n             {/*            )*/}\n             {/*        )}*/}\n             {/*})()}*/}\n\n            {device.brands.map(brand =>\n\n                <Card variant={\"outline-success\"}\n                    style={{cursor:'pointer'}}\n                    key={brand.id}\n                    className=\"p-3\"\n                    onClick={() => device.setSelectedBrand(brand)}\n                    border={brand.id === device.selectedBrand.id ? 'danger' : 'light'}\n                >\n                    {brand.name}\n                </Card>\n            )}\n\n            <Button className=\"ml-1\" variant={\"outline-success\"} onClick={addBrandAll}>All</Button>\n        </Row>\n    );\n});\n\nexport default BrandBar;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/TypeBar.js",["268","269","270","271","272","273","274","275","276","277","278","279","280"],"import React, {useContext, useEffect, useState} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Context} from \"../index\";\nimport Col from \"react-bootstrap/Col\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport moment from 'moment';\nimport ru from 'moment/locale/ru';\nimport {fetchBrands, fetchTypes, fetchTypesBrandIdname} from \"../http/deviceAPI\";\nimport {useHistory} from \"react-router-dom\";\nimport LeftBar from \"./LeftBar\";\nimport './../App.css';\nimport {check} from \"../http/userAPI\";\nimport {checkUserData} from \"../http/userDataAPI\";\nimport Shop from \"../pages/Shop\";\n\nconst TypeBar = observer((props) => {\n    const {device} = useContext(Context)\n    const [state, setState] = React.useState({ num: 0 });\n\n    const [deviceVisible, setDeviceVisible] = useState(false)\n    const history = useHistory()\n\n\n    useEffect(() => {\n        fetchTypes().then(data => device.setTypes(data))\n        // const timer = setTimeout(() => setState({ num: state.num + 1 }), 3000);\n        // return () => clearTimeout(timer);\n    }, [])\n\n\n    const home = () => {\n        device.setSelectedType({})\n        device.setSelectedBrand({})\n        props.updateData(true)\n    }\n\n    const brandIf = (type, typeid) => {\n        props.updateData(false)\n        device.setSelectedType(type)\n        fetchTypesBrandIdname(typeid).then(data => device.setBrands(data))\n    }\n\n    const colorTypeStart = (typeStart) => {\n        if(typeStart === true){return '#ba932e'}\n        if(typeStart === false){return '#22a14a'}\n        if(typeStart === null){return '#4547d9'}\n    }\n    const txtTypeStart = (typeStart, amount) => {\n        if(typeStart === true){return 'стартовал'}\n        if(typeStart === false){return 'идёт регистрация, взнос: ' + amount + \"руб.\"}\n        if(typeStart === null){return 'окончен, взносы составляли: ' + amount + \"руб.\"}\n    }\n\n    const txtTypeStartDate = (typeStart) => {\n        if(typeStart === true){return 'старт турнира: '}\n        if(typeStart === false){return 'старт регистрации: '}\n        if(typeStart === null){return 'турнир окончен: '}\n    }\n\n    return (\n        <div>\n            {/*<p>{state.num}</p>*/}\n            <LeftBar/>\n            <div className=\"m-3 d-flex h-100 justify-content-center align-self-center\">\n                <a onClick={home} style={{cursor:'pointer'}} className=\"mr-3\">ГЛАВНАЯ</a>\n            </div>\n            <ListGroup>\n                {device.types.map(type =>\n                    <ListGroup.Item\n                        key={type.id}\n                        style={{cursor: 'pointer', lineHeight: 1.2}}\n                        active={type.id === device.selectedType.id}\n                        onClick={() =>\n                            brandIf(type, type.id)\n                        }\n                    >\n                        <div className=\"head\">{type.description}</div>\n                        <div>{type.nametype}</div>\n                        <div>{txtTypeStartDate(type.start)}{moment(type.name).locale(\"ru\").format('YYYY-MM-DD HH:mm')}</div>\n                        <div>фонд = {type.fund}руб., взносы = 0, users = 12</div>\n                        <div style={{ color: colorTypeStart(type.start) }}>{txtTypeStart(type.start, type.amount)}</div>\n\n                    </ListGroup.Item>\n                )}\n            </ListGroup>\n\n            <LeftBar/>\n\n        </div>\n    );\n});\n\nexport default TypeBar;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/modals/CreateDevice.js",["281","282","283","284","285","286"],"import React, {useContext, useEffect, useState} from 'react';\nimport Modal from \"react-bootstrap/Modal\";\nimport {Button, Dropdown, Form, Row, Col, Spinner} from \"react-bootstrap\";\nimport {Context} from \"../../index\";\nimport {\n    createDevice,\n    fetchTypesBrandIdname,\n} from \"../../http/deviceAPI\";\nimport {observer} from \"mobx-react-lite\";\n\n\nconst CreateDevice = observer(({show, onHide}) => {\n\n    const {device, user, userdata} = useContext(Context)\n    const [disabledBrand, setDisabledBrand] = useState('none')\n    const [champ, setChamp] = useState('Чемпионат')\n    const [mapChamp, setMapChamp] = useState('Карта')\n    const [massiveChampStart, setMassiveChampStart] = useState([])\n    const [disabledButton, setDisabledButton] = useState(true)\n    const [selectedBrand, setSelectedBrand] = useState(0)\n    const [selectedType, setSelectedType] = useState(0)\n    const [brands, setBrands] = useState([\n        {id: 1, name: 'JC'}\n    ])\n\n    const mapChampF = (brand) => {\n        //device.setSelectedBrand(brand)\n        setSelectedBrand(brand)\n        setMapChamp(brand.name)\n        setDisabledButton(false)\n    }\n\n    const typeClick = (type, typeid) => {\n        //device.setSelectedType(type)\n        setSelectedType(type)\n        fetchTypesBrandIdname(typeid).then(data => setBrands(data))\n        setDisabledBrand('inline')\n        setChamp(type.nametype)\n    }\n\n    const addDevice = async () => {\n        try {\n            const formData = new FormData()\n            formData.append('brandId', selectedBrand.id)\n            formData.append('typeId', selectedType.id)\n            formData.append('userId', user.checkUser.id)\n            formData.append('userdatumId', userdata.userData.id)\n            setDisabledBrand('none')\n            setChamp('Championship')\n            setMapChamp('Map')\n            setDisabledButton(true)\n            await createDevice(formData).then(data => onHide())\n        } catch (e) {\n            alert(e.response.data.message)\n        }\n    }\n\n    const onHideDisabled = () => {\n        setDisabledBrand('none')\n        setChamp('Championship')\n        setMapChamp('Map')\n        setDisabledButton(true)\n        onHide()\n    }\n\n    return (\n        <Modal\n            show={show}\n            onHide={onHideDisabled}\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    ADD GAME\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Dropdown className=\"mt-2 mb-2\">\n                        <div className=\"head\">HEROES HOTA</div>\n                        <Dropdown.Toggle>{ champ || \"Championship\"}</Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            {device.types.map(massiveChampStart =>\n                                massiveChampStart.start === false ?\n                                <Dropdown.Item\n                                    onClick={() => typeClick(massiveChampStart, massiveChampStart.id)}\n                                    key={massiveChampStart.id}\n                                >\n                                    {/*{moment(massiveChampStart.name).format('YYYY-MM-DD HH:mm')}.*/}\n                                    {\"  \" +massiveChampStart.nametype}. registration: {massiveChampStart.amount}\n                                    <div> prize fund: {massiveChampStart.fund}</div>\n                                </Dropdown.Item>\n                                    :\n                                    \"\"\n                            )}\n\n                        </Dropdown.Menu>\n\n                        {/*<Dropdown.Menu>*/}\n                        {/*    {massiveChampStart.map(massiveChampStart =>*/}\n                        {/*        <Dropdown.Item*/}\n                        {/*            onClick={() => typeClick(massiveChampStart, massiveChampStart.id)}*/}\n                        {/*            key={massiveChampStart.id}*/}\n                        {/*        >*/}\n                        {/*            {moment(massiveChampStart.name).format('YYYY-MM-DD HH:mm')}.*/}\n                        {/*            {\"  \" +massiveChampStart.nametype}. Регистрация: {massiveChampStart.description}*/}\n                        {/*        </Dropdown.Item>*/}\n                        {/*    )}*/}\n                        {/*</Dropdown.Menu>*/}\n\n                    </Dropdown>\n                    <div style={{display: disabledBrand}}>\n                        <Dropdown className=\"mt-2 mb-2\">\n                            <Dropdown.Toggle> {mapChamp || \"Map\"}</Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                {brands.map(brand =>\n                                    <Dropdown.Item\n                                        onClick={() => mapChampF(brand)}\n                                        key={brand.id}\n                                    >\n                                        {brand.name}\n                                    </Dropdown.Item>\n                                )}\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </div>\n                    <div className=\"mt-4\">\n                        Внести взнос:\n                    </div>\n                    <div>\n                         {/*<a style={{fontSize: 24}} href=\"https://www.donationalerts.com/r/cyberbet\" target=\"_blank\">donationalerts.com</a>*/}\n                    </div>\n                </Form>\n            </Modal.Body>\n\n\n            <Modal.Footer>\n                <Button variant=\"outline-danger\" onClick={onHide}>Закрыть</Button>\n                <Button disabled={disabledButton} variant=\"outline-success\" onClick={addDevice}>Добавить</Button>\n            </Modal.Footer>\n        </Modal>\n\n    );\n});\n\nexport default CreateDevice;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/Inc.js",[],["287","288"],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/modals/CreateTableChamp.js",["289"],"import React, {useState} from 'react';\nimport Modal from \"react-bootstrap/Modal\";\nimport {Form, Button} from \"react-bootstrap\";\nimport {createTableRandom, createType} from \"../../http/deviceAPI\";\n\nconst CreateTableChamp = ({show, onHide}) => {\n\n    const [nametype, setNametype] = useState('')\n    // const [dateNew, setDateNew] = useState('')\n\n    const addType = () => {\n        try{\n            //createTableRandom({nametype: nametype, datedNew: dateNew}).then(data => {\n            createTableRandom({nametype: nametype}).then(data => {\n                setNametype('')\n                // setDateNew('')\n                onHide()\n            })\n        }catch (e) {\n            alert(e.response.data.message)\n        }\n    }\n\n    return (\n        <Modal\n            show={show}\n            onHide={onHide}\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Создание таблицы рандомов\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form className=\"m-2\">\n                    <Form.Control\n                        value={nametype}\n                        onChange={e => setNametype(e.target.value)}\n                        placeholder={\"Введите название из таблицы types\"}\n                        onKeyPress={event => {\n                            if (event.key === \"Enter\") {\n                                return addType()\n                            }\n                        }}\n                    />\n                </Form>\n                {/*<Form className=\"m-2\">*/}\n                {/*    <Form.Control*/}\n                {/*        value={dateNew}*/}\n                {/*        onChange={e => setDateNew(e.target.value)}*/}\n                {/*        placeholder={\"Введите дату второго круга\"}*/}\n                {/*    />*/}\n                {/*</Form>*/}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"outline-danger\" onClick={onHide}>Закрыть</Button>\n                <Button variant=\"outline-success\" onClick={addType}>Добавить</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default CreateTableChamp;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/modals/CreateChampLap.js",[],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/VSPage.js",["290","291","292","293","294","295","296","297","298","299","300","301","302"],"import React, {useContext, useEffect, useState} from 'react';\nimport {Button, Col, Container, Row, Image, Form, Spinner} from \"react-bootstrap\";\nimport {Link, useHistory, useParams} from 'react-router-dom'\nimport {createImg, fetchVSDevice, imgPhotoGet} from \"../http/deviceAPI\";\nimport moment from 'moment'\nimport {Context} from \"../index\";\nimport star from \"../assets/star.png\";\nimport {DEVICE_ROUTE} from \"../utils/consts\";\nimport {createImgVsUser, postDataLinkVs} from \"../http/vsAPI\";\n\nconst VSPage = () => {\n    const {user} = useContext(Context)\n    const [userId, setUserId] = useState(0)\n    const [typeId, setTypeId] = useState(0)\n    const [userOpp, setUserOpp] = useState('')\n    const [loading, setLoading] = useState(true)\n    const {type, id} = useParams()\n    const [VS, setVS] = useState({})\n    const [VSid, setVSid] = useState(0)\n    const [linkVs, setLinkVs] = useState('')\n    const [img, setImg] = useState('')\n    const history = useHistory()\n    const [file, setFile] = useState(null)\n\n    useEffect(() => {\n        fetchVSDevice(type, id).then(data => {\n            setVS(data)\n           // setTimeout(() => {\n           //     setImg('')\n           // },1000);\n        }).finally(() => setLoading(false))\n    }, [img])\n    if (loading) {return <Spinner animation={\"grow\"}/>}\n\n    const selectFile = e => {\n        setFile(e.target.files[0])\n    }\n\n    const renderer = (a) => {\n        if (user.checkUser.id === a) {\n            return false\n        }\n        else {\n            return true\n        }\n    }\n\n    const linkF = (a) => {\n        if(a !== '' && a !== null) {\n            if (a.slice(0, 7) === 'http://' || a.slice(0, 8) === 'https://') {\n                return true\n            } else {\n                return false\n            }\n        }else{\n            return false\n        }\n    }\n\n    const addImage = () => {\n        const formData = new FormData()\n        formData.append('id', userId)\n        formData.append('idvs', VSid)\n        formData.append('typeId', typeId)\n        formData.append('userOpp', userOpp)\n        formData.append('img', file)\n        createImgVsUser(formData).then(data => setImg(data))\n        //setImg(createImgVsUser(formData))\n        setFile('')\n    }\n\n    const dataLinkVs = async () => {\n        try{ await postDataLinkVs(userId, VSid, typeId, userOpp, linkVs)\n             alert(\"ссылка изменена на: \" + linkVs)}\n        catch (e) {alert(e.response.data.message)}}\n\n    return (\n        <Container className=\"mt-3\">\n            <Row>\n                <Col className=\"d-flex justify-content-center\" style={{maxWidth: '50%'}}>\n                    <div className=\"text-primary\" style={{cursor: 'pointer', fontSize: 30, color: '#000000'}}  onClick={() => history.push(DEVICE_ROUTE + '/' + VS.VS.rows[0].userdatumId)} >{VS.VS.rows[0].username}</div>\n                </Col>\n\n                <Col className=\"d-flex justify-content-center\" style={{maxWidth: '50%'}}>\n                    <div className=\"text-primary\" style={{cursor: 'pointer', fontSize: 30, color: '#000000'}}  onClick={() => history.push(DEVICE_ROUTE + '/' + VS.VS.rows[0].userdatumIdOpp)} >{VS.VS.rows[0].oppUsername}</div>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col className=\"d-flex justify-content-center\" style={{maxWidth: '50%'}}>\n                    <Image style={{ border: '5px solid lightgray'}} width={300} height={300}\n                           src={VS.user.rows[0].img === null ? process.env.REACT_APP_API_URL + 'photo/' + 'photo.jpg' : process.env.REACT_APP_API_URL + 'photo/' + VS.user.rows[0].img}/>\n                </Col>\n                <Col className=\"d-flex justify-content-center\" style={{maxWidth: '50%'}}>\n                    <Image style={{ border: '5px solid lightgray'}} width={300} height={300}\n                           src={VS.userOpp.rows[0].img === null ? process.env.REACT_APP_API_URL + 'photo/' + 'photo.jpg' : process.env.REACT_APP_API_URL + 'photo/' + VS.userOpp.rows[0].img}/>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col className=\"d-flex justify-content-center\" style={{maxWidth: '50%'}}>\n                    <Image width={18} height={18} src={star}/>\n                    <div>{VS.user.rows[0].rating}</div>\n                </Col>\n                <Col className=\"d-flex justify-content-center\" style={{maxWidth: '50%'}}>\n                    <Image width={18} height={18} src={star}/>\n                    <div>{VS.userOpp.rows[0].rating}</div>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col className=\"d-flex justify-content-center\">\n                    <div>{VS.VS.rows[0].dateMatch !== null ? moment(VS.VS.rows[0].dateMatch).format('YYYY-MM-DD HH:mm:ss') : 'Время игры еще не задано'}</div>\n                </Col>\n            </Row>\n\n\n            {/*1*/}\n            <Row className=\"mt-2\">\n                <Col style={{maxWidth: '50%'}}>\n                    <div className=\"d-flex flex-column align-items-center\">\n                        ФИНАЛКА\n                        <a href={VS.VS.rows[0].imgfu === null ? process.env.REACT_APP_API_URL + 'final.jpg' : process.env.REACT_APP_API_URL + VS.VS.rows[0].typeId +'/' + VS.VS.rows[0].imgfu} target=\"_blank\">\n                        <Image style={{ border: '5px solid lightgray'}} width={300} height={300}\n                               src={VS.VS.rows[0].imgfu === null ? process.env.REACT_APP_API_URL + 'final.jpg' : process.env.REACT_APP_API_URL + VS.VS.rows[0].typeId +'/' + VS.VS.rows[0].imgfu}/></a>\n                        <Form.Control style={{maxWidth: '50%'}}  className=\"mt-1\"\n                                      hidden={renderer(VS.VS.rows[0].userId)}\n                                      type=\"file\"\n                                      onChange={selectFile}\n                        />\n                        <Button variant=\"outline-secondary\" size=\"sm\" className=\"mt-1 mb-3\"\n                            hidden={renderer(VS.VS.rows[0].userId)}\n                                onFocus={() => {\n                                    setUserId(user.checkUser.id)\n                                    setVSid(VS.VS.rows[0].id)\n                                    setTypeId(VS.VS.rows[0].typeId)\n                                    setUserOpp('imgfu')\n                                }}\n                                onClick={addImage}\n                        >ADD\n                        </Button>\n                    </div>\n                </Col>\n\n                <Col style={{maxWidth: '50%'}}>\n                    <div className=\"d-flex flex-column align-items-center\">\n                        ФИНАЛКА\n                        <a href={VS.VS.rows[0].imgfo === null ? process.env.REACT_APP_API_URL + 'final.jpg' : process.env.REACT_APP_API_URL + VS.VS.rows[0].typeId +'/' + VS.VS.rows[0].imgfo} target=\"_blank\">\n                            <Image style={{ border: '5px solid lightgray'}} width={300} height={300}\n                               src={VS.VS.rows[0].imgfo === null ? process.env.REACT_APP_API_URL + 'final.jpg' : process.env.REACT_APP_API_URL + VS.VS.rows[0].typeId +'/' + VS.VS.rows[0].imgfo}/></a>\n\n                        <Form.Control style={{maxWidth: '50%'}}  className=\"mt-1\"\n                                      hidden={renderer(VS.VS.rows[0].oppUserId)}\n                                      type=\"file\"\n                                      onChange={selectFile}\n                        />\n                        <Button variant=\"outline-secondary\" size=\"sm\" className=\"mt-1 mb-3\"\n                                hidden={renderer(VS.VS.rows[0].oppUserId)}\n                                onFocus={() => {\n                                    setUserId(user.checkUser.id)\n                                    setVSid(VS.VS.rows[0].id)\n                                    setTypeId(VS.VS.rows[0].typeId)\n                                    setUserOpp('imgfo')\n                                }}\n                                onClick={addImage}\n                        >ADD\n                        </Button>\n                    </div>\n                </Col>\n            </Row>\n            {/*2*/}\n            <Row className=\"mt-3\">\n                <Col style={{maxWidth: '50%'}}>\n                    <div className=\"d-flex flex-column align-items-center\">\n                        АРТЕФАКТЫ\n                        <a href={VS.VS.rows[0].imgfuart === null ? process.env.REACT_APP_API_URL + 'final.jpg' : process.env.REACT_APP_API_URL + VS.VS.rows[0].typeId +'/' + VS.VS.rows[0].imgfuart} target=\"_blank\">\n                            <Image style={{ border: '5px solid lightgray'}} width={300} height={300}\n                                   src={VS.VS.rows[0].imgfuart === null ? process.env.REACT_APP_API_URL + 'final.jpg' : process.env.REACT_APP_API_URL + VS.VS.rows[0].typeId +'/' + VS.VS.rows[0].imgfuart}/></a>\n                        <Form.Control style={{maxWidth: '50%'}}  className=\"mt-1\"\n                                      hidden={renderer(VS.VS.rows[0].userId)}\n                                      type=\"file\"\n                                      onChange={selectFile}\n                        />\n                        <Button variant=\"outline-secondary\" size=\"sm\" className=\"mt-1\"\n                                hidden={renderer(VS.VS.rows[0].userId)}\n                                onFocus={() => {\n                                    setUserId(user.checkUser.id)\n                                    setVSid(VS.VS.rows[0].id)\n                                    setTypeId(VS.VS.rows[0].typeId)\n                                    setUserOpp('imgfuart')\n                                }}\n                                onClick={addImage}\n                        >ADD\n                        </Button>\n                    </div>\n                </Col>\n\n                <Col style={{maxWidth: '50%'}}>\n                    <div className=\"d-flex flex-column align-items-center\">\n                        АРТЕФАКТЫ\n                        <a href={VS.VS.rows[0].imgfoart === null ? process.env.REACT_APP_API_URL + 'final.jpg' : process.env.REACT_APP_API_URL + VS.VS.rows[0].typeId +'/' + VS.VS.rows[0].imgfoart} target=\"_blank\">\n                            <Image style={{ border: '5px solid lightgray'}} width={300} height={300}\n                                   src={VS.VS.rows[0].imgfoart === null ? process.env.REACT_APP_API_URL + 'final.jpg' : process.env.REACT_APP_API_URL + VS.VS.rows[0].typeId +'/' + VS.VS.rows[0].imgfoart}/></a>\n\n                        <Form.Control style={{maxWidth: '50%'}}  className=\"mt-1\"\n                                      hidden={renderer(VS.VS.rows[0].oppUserId)}\n                                      type=\"file\"\n                                      onChange={selectFile}\n                        />\n                        <Button variant=\"outline-secondary\" size=\"sm\" className=\"mt-1 mb-3\"\n                                hidden={renderer(VS.VS.rows[0].oppUserId)}\n                                onFocus={() => {\n                                    setUserId(user.checkUser.id)\n                                    setVSid(VS.VS.rows[0].id)\n                                    setTypeId(VS.VS.rows[0].typeId)\n                                    setUserOpp('imgfoart')\n                                }}\n                                onClick={addImage}\n                        >ADD\n                        </Button>\n                    </div>\n                </Col>\n            </Row>\n\n            {/*3*/}\n            <Row className=\"mt-3\">\n                <Col style={{maxWidth: '50%'}}>\n                    <div className=\"d-flex flex-column align-items-center\">\n                        КАРТА\n                        <a href={VS.VS.rows[0].imgfucart === null ? process.env.REACT_APP_API_URL + 'final.jpg' : process.env.REACT_APP_API_URL + VS.VS.rows[0].typeId +'/' + VS.VS.rows[0].imgfucart} target=\"_blank\">\n                            <Image style={{ border: '5px solid lightgray'}} width={300} height={300}\n                                   src={VS.VS.rows[0].imgfucart === null ? process.env.REACT_APP_API_URL + 'final.jpg' : process.env.REACT_APP_API_URL + VS.VS.rows[0].typeId +'/' + VS.VS.rows[0].imgfucart}/></a>\n                        <Form.Control style={{maxWidth: '50%'}}  className=\"mt-1\"\n                                      hidden={renderer(VS.VS.rows[0].userId)}\n                                      type=\"file\"\n                                      onChange={selectFile}\n                        />\n                        <Button variant=\"outline-secondary\" size=\"sm\" className=\"mt-1 mb-3\"\n                                hidden={renderer(VS.VS.rows[0].userId)}\n                                onFocus={() => {\n                                    setUserId(user.checkUser.id)\n                                    setVSid(VS.VS.rows[0].id)\n                                    setTypeId(VS.VS.rows[0].typeId)\n                                    setUserOpp('imgfucart')\n                                }}\n                                onClick={addImage}\n                        >ADD\n                        </Button>\n                    </div>\n                </Col>\n\n                <Col style={{maxWidth: '50%'}}>\n                    <div className=\"d-flex flex-column align-items-center\">\n                        КАРТА\n                        <a href={VS.VS.rows[0].imgfocart === null ? process.env.REACT_APP_API_URL + 'final.jpg' : process.env.REACT_APP_API_URL + VS.VS.rows[0].typeId +'/' + VS.VS.rows[0].imgfocart} target=\"_blank\">\n                            <Image style={{ border: '5px solid lightgray'}} width={300} height={300}\n                                   src={VS.VS.rows[0].imgfocart === null ? process.env.REACT_APP_API_URL + 'final.jpg' : process.env.REACT_APP_API_URL + VS.VS.rows[0].typeId +'/' + VS.VS.rows[0].imgfocart}/></a>\n\n                        <Form.Control style={{maxWidth: '50%'}}  className=\"mt-1\"\n                                      hidden={renderer(VS.VS.rows[0].oppUserId)}\n                                      type=\"file\"\n                                      onChange={selectFile}\n                        />\n                        <Button variant=\"outline-secondary\" size=\"sm\" className=\"mt-1 mb-3\"\n                                hidden={renderer(VS.VS.rows[0].oppUserId)}\n                                onFocus={() => {\n                                    setUserId(user.checkUser.id)\n                                    setVSid(VS.VS.rows[0].id)\n                                    setTypeId(VS.VS.rows[0].typeId)\n                                    setUserOpp('imgfocart')\n                                }}\n                                onClick={addImage}\n                        >ADD\n                        </Button>\n                    </div>\n                </Col>\n            </Row>\n            {/*END IMAGE*/}\n            <Row className=\"mt-5\">\n                <Col style={{maxWidth: '50%'}}>\n                    <div className=\"d-flex flex-column align-items-center\">\n                        {linkF(VS.VS.rows[0].linku) ? <a href={VS.VS.rows[0].linku} target=\"_blank\">видео</a> : <div>видео нет</div>}\n\n                        <input type=\"text\" className=\"mb-5\"\n                               style={{backgroundColor: 'transparent', textAlign: 'left', borderWidth: 1, width: 350,fontSize: 24}}\n                               hidden={renderer(VS.VS.rows[0].userId)}\n                               defaultValue={VS.VS.rows[0].linku}\n                               onClick={() => {\n                                   setUserId(user.checkUser.id)\n                                   setVSid(VS.VS.rows[0].id)\n                                   setTypeId(VS.VS.rows[0].typeId)\n                                   setUserOpp('linku')\n                               }}\n                               onInput={() => {\n                                   setUserId(user.checkUser.id)\n                                   setVSid(VS.VS.rows[0].id)\n                                   setTypeId(VS.VS.rows[0].typeId)\n                                   setUserOpp('linku')\n                               }}\n                               onChange={(event) => setLinkVs(event.target.value)}\n                               onKeyPress={event => {\n                                   if (event.key === \"Enter\") {\n                                       return dataLinkVs()\n                                   }\n                               }}\n                        />\n                    </div>\n                </Col>\n\n                <Col style={{maxWidth: '50%'}}>\n                    <div className=\"d-flex flex-column align-items-center\">\n                        {linkF(VS.VS.rows[0].linko) ? <a href={VS.VS.rows[0].linko} target=\"_blank\">видео</a> : <div>видео нет</div>}\n                        <input type=\"text\" className=\"mb-5\"\n                               style={{backgroundColor: 'transparent', textAlign: 'left', borderWidth: 1, width: 350,fontSize: 24}}\n                               hidden={renderer(VS.VS.rows[0].oppUserId)}\n                               defaultValue={VS.VS.rows[0].linko}\n                               onClick={() => {\n                                   setUserId(user.checkUser.id)\n                                   setVSid(VS.VS.rows[0].id)\n                                   setTypeId(VS.VS.rows[0].typeId)\n                                   setUserOpp('linko')\n                               }}\n                            onInput={() => {\n                                setUserId(user.checkUser.id)\n                                setVSid(VS.VS.rows[0].id)\n                                setTypeId(VS.VS.rows[0].typeId)\n                                setUserOpp('linko')\n                            }}\n                               onChange={(event) => setLinkVs(event.target.value)}\n                               onKeyPress={event => {\n                                   if (event.key === \"Enter\") {\n                                       return dataLinkVs()\n                                   }\n                               }}\n                        />\n                    </div>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col className=\"d-flex justify-content-center mb-5\" style={{maxWidth: '50%'}}>\n                    <Link to={{ pathname: VS.user.rows[0].twitch }} target=\"_blank\">Twitch</Link>\n                </Col>\n                <Col className=\"d-flex justify-content-center mb-5\" style={{maxWidth: '50%'}}>\n                    <Link to={{ pathname: VS.userOpp.rows[0].twitch }} target=\"_blank\">Twitch</Link>\n                </Col>\n            </Row>\n\n        </Container>\n    );\n\n};\n\nexport default VSPage;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/AuthPromo.js",["303"],"import React from 'react';\nimport {Container, Form} from \"react-bootstrap\";\nimport {useParams} from \"react-router-dom\";\nimport {observer} from \"mobx-react-lite\";\nimport Auth from \"./Auth\";\nconst AuthPromo = observer(() => {\n    const {promo} = useParams()\n    return (\n        <Container>\n            <Auth promo={promo}/>\n        </Container>\n    );\n});\nexport default AuthPromo;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/http/vsAPI.js",[],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/Footer.js",["304","305","306","307","308","309","310"],"import React, {useContext, useState} from 'react';\nimport {Context} from \"../index\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport {NavLink} from \"react-router-dom\";\nimport {ADMIN_SETTINGS, QIWI_ROUTE} from \"../utils/consts\";\nimport {Button, Col, Row} from \"react-bootstrap\";\nimport {observer} from \"mobx-react-lite\";\nimport Container from \"react-bootstrap/Container\";\nimport {useHistory} from 'react-router-dom'\nimport CreateQiwi from \"./modals/CreateQiwi\";\n\n\nconst Footer = observer(() => {\n\n    const history = useHistory()\n    const [deviceVisible, setDeviceVisible] = useState(false)\n\n    return (\n        // className=\"navbar fixed-bottom navbar-light bg-light\"\n        //     <nav style={{ paddingBottom:\"15%\", position: 'absolute', width: '100%', height: '1px'}} >\n        <Container className=\"d-flex h-100 justify-content-center align-self-center\">\n        <nav style={{ paddingTop:\"3%\"}}>\n            <div className=\"container\">\n                <Row>\n                    <Col style={{maxWidth: '100%'}} >\n                        <ul>\n                            <li className=\"list-unstyled\">\n                                Для предложений и сотрудничества:\n                            </li>\n                            <li className=\"list-unstyled\">\n                                <a className=\"navbar-brand\" href=\"https://t.me/robotavatar2\" target=\"_blank\">@robotavatar2</a>\n\n                            </li>\n                            {/*<li className=\"list-unstyled\">*/}\n                            {/*    <a className=\"navbar-brand\" href=\"https://www.facebook.com/kuntsevichsiarhei\" target=\"_blank\">facebook</a>*/}\n                            {/*</li>*/}\n                            {/*<li className=\"list-unstyled\">*/}\n                            {/*    <a className=\"navbar-brand\" href=\"https://vk.com/socdempartyorg\" target=\"_blank\">vk.com</a>*/}\n                            {/*</li>*/}\n                        </ul>\n                    </Col>\n\n                    <Col style={{maxWidth: '50%'}}>\n                        <ul>\n                            {/*<li className=\"list-unstyled\">*/}\n                            {/*    Взносы и пожертвования:*/}\n                            {/*</li>*/}\n\n                                <li className=\"mb-2 list-unstyled d-flex h-100 justify-content-center align-self-center\">\n                                    <Button\n                                        variant={\"outline-secondary\"}\n                                        onClick={() => setDeviceVisible(true)}\n                                    >\n                                        DONATE\n                                    </Button>\n                                </li>\n\n                            <CreateQiwi show={deviceVisible} onHide={() => setDeviceVisible(false)}/>\n\n                                <li className=\"list-unstyled d-flex h-100 justify-content-center align-self-center\">\n                                    <Button\n                                        variant={\"outline-secondary\"}\n                                        onClick={() => history.push(QIWI_ROUTE)}\n                                    >\n                                        LIST DONATE\n                                    </Button>\n                                </li>\n\n\n                            {/*<li className=\"list-unstyled\">*/}\n                            {/*    <a className=\"navbar-brand\" href=\"https://my.qiwi.com/Sergei-KZUuLgmqY8\" target=\"_blank\">Банковская карта, qiwi (анонимно)</a>*/}\n                            {/*</li>*/}\n                            {/*<li className=\"list-unstyled\">*/}\n                            {/*    <a className=\"navbar-brand\" href=\"https://www.donationalerts.com/r/cyberbet\" target=\"_blank\">donationalerts.com</a>*/}\n                            {/*</li>*/}\n                        </ul>\n                    </Col>\n                </Row>\n\n            </div>\n        </nav>\n        </Container>\n\n    );\n\n})\n\nexport default Footer;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/PayPal.js",["311","312","313"],"import React, {useEffect, useState} from 'react';\nimport ReactDOM from \"react-dom\"\nimport {observer} from \"mobx-react-lite\";\n\nimport { PayPalButton } from \"react-paypal-button-v2\";\n//const PayPalButton = paypal.Buttons.driver(\"react\", { React, ReactDOM });\n\nconst PayPal = observer(() => {\n\n    const [valueBet, setValueBet] = useState('')\n\n    const [saveTransaction, setSaveTransaction] = useState({})\n\n    useEffect(() => {\n        setValueBet(\"1\")\n    }, [])\n\n    return (\n        <PayPalButton\n            amount={valueBet}\n            // shippingPreference=\"NO_SHIPPING\" // default is \"GET_FROM_FILE\"\n            onSuccess={(details, data) => {\n                //alert(\"Transaction completed by \" + details.payer.name.given_name);\n\n                //saveTransaction(data.orderID)\n                //const a = details.payer.name.given_name\n                return data.orderID\n                //OPTIONAL: Call your server to save the transaction\n                // return fetch(\"/paypal-transaction-complete\", {\n                //     method: \"post\",\n                //     body: JSON.stringify({\n                //         orderId: data.orderID\n                //     })\n                // });\n            }}\n            options={{\n                clientId: \"AYheu3PzB8ojAuOFvxuFyheRF4mEFq1lr4A7_NyNisM3wwvu63W5T-2egLzLFoP-IrUI7zAVf2mkYkrS\"\n            }}\n        />\n\n    );\n\n})\nexport default PayPal;\n\n//\n// import React from 'react';\n// import ReactDOM from \"react-dom\"\n// import {observer} from \"mobx-react-lite\";\n//\n// const PayPalButton = paypal.Buttons.driver(\"react\", { React, ReactDOM });\n//\n// const PayPal = observer(() => {\n//\n//     const createOrder = (data, actions) =>{\n//         return actions.order.create({\n//             purchase_units: [\n//                 {\n//                     amount: {\n//                         value: \"0.01\",\n//                     },\n//                 },\n//             ],\n//         });\n//     };\n//\n//     const onApprove = (data, actions) => {\n//         return actions.order.capture();\n//     };\n//     return (\n//         <PayPalButton\n//             createOrder={(data, actions) => createOrder(data, actions)}\n//             onApprove={(data, actions) => onApprove(data, actions)}\n//         />\n//     );\n//\n// })\n//\n// export default PayPal;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/http/qiwiAPI.js",["314"],"import {$authHost, $host} from \"./index\";\n\n\nexport const fetchQiwi = async (pay, login, nametype, description) => {\n\n    const {data} = await $host.get('api/qiwi/', {params: {\n            pay, login, nametype, description\n    }})\n    //const {data} = await $host.get('api/qiwi/'+pay+'/'+login+'/'+description)\n    //const {data} = await $host.get('api/qiwi/' + pay)\n    return data\n}\n\nexport const fetchQiwiPayUsers = async () => {\n    const {data} = await $host.get('api/qiwi/payusers')\n    return data\n}\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/Qiwi.js",["315","316","317","318","319","320"],"import {observer} from \"mobx-react-lite\";\nimport React, {useEffect, useState} from \"react\";\nimport {fetchQiwi, fetchQiwiPayUsers} from \"../http/qiwiAPI\";\nimport {fetchBrands} from \"../http/deviceAPI\";\nimport {Button, Col, Dropdown, Row, Spinner} from \"react-bootstrap\";\nimport {Container} from \"react-bootstrap\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport DeviceItem from \"../components/DeviceItem\";\nimport {DEVICE_ROUTE} from \"../utils/consts\";\nimport moment from \"moment\";\nimport ReactPaginate from \"react-paginate\";\n\n\nconst Qiwi = observer(() => {\n    const [qiwiPayUsers, setQiwiPayUsers] = useState({})\n    const [loading, setLoading] = useState(true)\n    const [state, setState] = React.useState({ num: 0 });\n\n    const [pageNumber, setPageNumber] = useState(0);\n    const usersPerPage = 10;\n    const pagesVisited = pageNumber * usersPerPage;\n\n    const [pageNumber2, setPageNumber2] = useState(0);\n    const usersPerPage2 = 20;\n    const pagesVisited2 = pageNumber2 * usersPerPage2;\n\n    const [pageNumber3, setPageNumber3] = useState(0);\n    const usersPerPage3 = 5;\n    const pagesVisited3 = pageNumber3 * usersPerPage3;\n\n    useEffect(() => {\n        fetchQiwiPayUsers().then(data => setQiwiPayUsers(data)).finally(() => setLoading(false));\n        const timer = setTimeout(() => setState({ num: state.num + 1 }), 3000);\n        return () => clearTimeout(timer);\n    }, [state])\n\n    if (loading) {\n        return <Spinner animation={\"grow\"}/>\n    }\n    const pageCount = Math.ceil(qiwiPayUsers.donates.rows.length / usersPerPage);\n    const changePage = ({ selected }) => {\n        setPageNumber(selected);\n    };\n    const pageCountUserBest = Math.ceil(qiwiPayUsers.donates_best.rows.length / usersPerPage2);\n    const changePageUserBest = ({ selected }) => {\n        setPageNumber2(selected);\n    };\n    const pageCountTypesBest = Math.ceil(qiwiPayUsers.donates_types.rows.length / usersPerPage3);\n    const changePageTypesBest = ({ selected }) => {\n        setPageNumber3(selected);\n    };\n\n\n    return (\n        <Container style={{maxWidth: '100%'}}>\n            <Row className=\"mb-5\">\n                <Col style={{maxWidth: '25%'}}>\n                    <div>\n                        <ListGroup className=\"mb-3\">\n                            <div className=\"m-2 list-unstyled d-flex h-100 justify-content-center align-self-center\" style={{fontSize: 20}}>Best championship donate</div>\n                            {qiwiPayUsers.donates_types.rows\n                                .slice(pagesVisited3, pagesVisited3 + usersPerPage3)\n                                .map((qiwiPayUser, index) =>\n                                    <ListGroup.Item key={index}\n                                        //style={{cursor: 'pointer'}}\n                                        // active={type.id === device.selectedType.id}\n                                        // onClick={() =>\n                                        //     brandIf(type, type.id)\n                                        // }\n                                    >\n                                        <Row>\n                                            <Col className=\"d-flex justify-content-center\" style={{maxWidth: '40%'}}>\n                                                <div style={{ fontSize: 15}} >{qiwiPayUser.description}</div>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-center\" style={{maxWidth: '40%'}}>\n                                                <div style={{ fontSize: 15}} >{qiwiPayUser.nametype}</div>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-center\" style={{maxWidth: '20%'}}>\n                                                <div style={{ fontSize: 15}} >{qiwiPayUser.fund} руб.</div>\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                )}\n                        </ListGroup>\n                        <ReactPaginate\n                            previousLabel={\"Previous\"}\n                            nextLabel={\"Next\"}\n                            pageCount={pageCountTypesBest}\n                            onPageChange={changePageTypesBest}\n                            containerClassName={\"paginationBttns\"}\n                            previousLinkClassName={\"previousBttn\"}\n                            nextLinkClassName={\"nextBttn\"}\n                            disabledClassName={\"paginationDisabled\"}\n                            activeClassName={\"paginationActive\"}\n                        />\n                    </div>\n                    <div>\n                        <ListGroup className=\"mb-3\">\n                            <div className=\"m-2 list-unstyled d-flex h-100 justify-content-center align-self-center\" style={{fontSize: 20}}>Best sum user donate</div>\n                            {qiwiPayUsers.donates_best.rows\n                                .slice(pagesVisited2, pagesVisited2 + usersPerPage2)\n                                .map((qiwiPayUser, index) =>\n                                    <ListGroup.Item key={index}\n                                        //style={{cursor: 'pointer'}}\n                                        // active={type.id === device.selectedType.id}\n                                        // onClick={() =>\n                                        //     brandIf(type, type.id)\n                                        // }\n                                    >\n                                        <Row>\n                                            <Col className=\"d-flex justify-content-center\" style={{maxWidth: '65%'}}>\n                                                <div style={{ fontSize: 15}} >{qiwiPayUser.username}</div>\n                                            </Col>\n\n                                            <Col className=\"d-flex justify-content-center\" style={{maxWidth: '35%'}}>\n                                                <div style={{ fontSize: 15}} >{qiwiPayUser.sum} руб.</div>\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                )}\n                        </ListGroup>\n                        <ReactPaginate\n                            previousLabel={\"Previous\"}\n                            nextLabel={\"Next\"}\n                            pageCount={pageCountUserBest}\n                            onPageChange={changePageUserBest}\n                            containerClassName={\"paginationBttns\"}\n                            previousLinkClassName={\"previousBttn\"}\n                            nextLinkClassName={\"nextBttn\"}\n                            disabledClassName={\"paginationDisabled\"}\n                            activeClassName={\"paginationActive\"}\n                        />\n                    </div>\n                </Col>\n                <Col style={{maxWidth: '75%'}}>\n                    <ListGroup className=\"mb-3\">\n                        <div className=\"m-2 list-unstyled d-flex h-100 justify-content-center align-self-center\" style={{fontSize: 20}}>Last donate</div>\n                        {qiwiPayUsers.donates.rows\n                            .slice(pagesVisited, pagesVisited + usersPerPage)\n                            .map((qiwiPayUser, index) =>\n                                <ListGroup.Item key={index}\n                                    //style={{cursor: 'pointer'}}\n                                    // active={type.id === device.selectedType.id}\n                                    // onClick={() =>\n                                    //     brandIf(type, type.id)\n                                    // }\n                                >\n                                    <Row>\n                                        <Col className=\"d-flex justify-content-center\" style={{maxWidth: '20%'}}>\n                                            <div style={{ fontSize: 15}} >{qiwiPayUser.username}</div>\n                                        </Col>\n\n                                        <Col className=\"d-flex justify-content-center\" style={{maxWidth: '15%'}}>\n                                            <div style={{ fontSize: 15}} >{qiwiPayUser.amount} руб.</div>\n                                        </Col>\n                                        <Col className=\"d-flex justify-content-center\" style={{maxWidth: '25%'}}>\n                                            <div style={{ fontSize: 15}} >{moment(qiwiPayUser.createdAt).format('YYYY-MM-DD HH:mm')}</div>\n                                        </Col>\n                                        <Col className=\"d-flex justify-content-left\" style={{maxWidth: '40%'}}>\n                                            <div style={{ fontSize: 15}} >{qiwiPayUser.comment}</div>\n                                        </Col>\n                                    </Row>\n                                </ListGroup.Item>\n                            )}\n                    </ListGroup>\n                    <ReactPaginate\n                        previousLabel={\"Previous\"}\n                        nextLabel={\"Next\"}\n                        pageCount={pageCount}\n                        onPageChange={changePage}\n                        containerClassName={\"paginationBttns\"}\n                        previousLinkClassName={\"previousBttn\"}\n                        nextLinkClassName={\"nextBttn\"}\n                        disabledClassName={\"paginationDisabled\"}\n                        activeClassName={\"paginationActive\"}\n                    />\n                </Col>\n            </Row>\n        </Container>\n    );\n\n})\nexport default Qiwi;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/modals/CreateQiwi.js",["321","322","323","324"],"import React, {useContext, useEffect, useState} from 'react';\nimport Modal from \"react-bootstrap/Modal\";\nimport {Form, Button, Spinner} from \"react-bootstrap\";\nimport {createType, fetchDevices} from \"../../http/deviceAPI\";\nimport {fetchQiwi} from \"../../http/qiwiAPI\";\nimport {Context} from \"../../index\";\nimport {observer} from \"mobx-react-lite\";\n\nconst CreateQiwi = observer(({show, onHide, nametype, code_transaction}) => {\n    //code_transaction\n    //1 - types\n    //2 - cyberbet\n\n\n    const {user, device, userdata} = useContext(Context)\n    const [pay, setPay] = useState('')\n    const [login, setLogin] = useState('')\n    const [description, setDescription] = useState('')\n\n    useEffect(() => {\n            if(user.isAuth){\n                //setTimeout(() => {\n                    setLogin(userdata.userData.username)\n                //},1000);\n            }\n            setPay('100')\n            setDescription('Фонд ' + nametype)\n    }, [device.selectedType])\n\n\n    const qiwi = async () => {\n        try{\n            if(login.length <= 25) {\n                //let regexp = /^[A-Za-zА-Яа-я0-9_-]+$/i\n                //if(regexp.test(login)) {\n                    await fetchQiwi(pay, login, nametype, description, code_transaction).then( data => {\n                        //setValueBet(data)\n                        window.open(\n                            data,\n                            '_blank' // <- opens the link in a new tab or window.\n                        );\n                    });\n                // }else{\n                //     return alert(\"Login должен состоять из английских и русских символов, разрешённы: цифры,знак минус и нижнее подчеркиванее\")\n                // }\n            }else{\n                return alert(\"Login должен содержать не более 25 символов\")\n            }\n            if(login === '' || description === '') {\n                return alert(\"Поля: (От кого) и (Комментарий) должны быть заполнены\")\n            }\n        }\n        catch (e) {alert(\"Введите все данные \" + e.response.data.message)}\n    }\n\n    return (\n        <Modal\n            show={show}\n            onHide={onHide}\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    DONATE\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n\n                <Form className=\"m-2\">\n\n                    <label style={{lineHeight: 1}}>\n                        Сумма: RUS {pay} руб.,\n                        {/*BEL: {(Number(pay)*0.034).toFixed(2)} руб., USD: {(Number(pay)/73.4776).toFixed(2)} $.*/}\n                    </label>\n\n                    <Form.Control\n                        type=\"number\"\n                        value={pay}\n                        onChange={e => setPay(e.target.value)}\n                        onKeyPress={event => {\n                            if (event.key === \"Enter\") {\n                                return qiwi()\n                            }\n                        }}\n                    />\n                </Form>\n\n                <Form className=\"m-2 mt-3\">\n                    <Form.Control\n                        value={login}\n                        onChange={e => setLogin(e.target.value)}\n                        placeholder={\"От кого:\"}\n                        //defaultValue={userdata.userData.username}\n                        onKeyPress={event => {\n                            if (event.key === \"Enter\") {\n                                return qiwi()\n                            }\n                        }}\n                    />\n                </Form>\n\n                <Form className=\"m-2\">\n                    <Form.Control\n                        value={description}\n                        onChange={e => setDescription(e.target.value)}\n                        placeholder={\"Комментарий\"}\n                        onKeyPress={event => {\n                            if (event.key === \"Enter\") {\n                                return qiwi()\n                            }\n                        }}\n                    />\n                </Form>\n\n                <Form className=\"m-2 mt-5\">\n                    <label>\n                        Список всех донатов\n                        {/*<input type=\"text\" value={this.state.value} onChange={} />*/}\n                        {/*<input type=\"text\" />*/}\n                    </label>\n                </Form>\n\n\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"outline-danger\" onClick={onHide}>Закрыть</Button>\n                <Button variant=\"outline-success\" onClick={qiwi}>Далее</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n});\n\nexport default CreateQiwi;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/modals/CreateChampWin.js",[],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/DeviceListStartWin.js",["325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340"],"import React, {useContext, useEffect, useState} from 'react';\nimport {Card, Col, Container, Row, Spinner} from \"react-bootstrap\";\nimport Image from \"react-bootstrap/Image\";\nimport star from '../assets/star.png'\nimport {useHistory} from \"react-router-dom\"\nimport {DEVICE_ROUTE} from \"../utils/consts\";\nimport {observer} from \"mobx-react-lite\";\nimport {Context} from \"../index\";\nimport DeviceItem from \"./DeviceItem\";\nimport {check} from \"../http/userAPI\";\nimport {checkUserData} from \"../http/userDataAPI\";\nimport {fetchBrands, fetchDevices, fetchTypes} from \"../http/deviceAPI\";\nimport {fetchUsersWin} from \"../http/vsAPI\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport {fetchQiwiPayUsers} from \"../http/qiwiAPI\";\n\n\nconst DeviceListStartWin = observer((props) => {\n    const {device} = useContext(Context)\n    const [loading, setLoading] = useState(true)\n    const [win, setWin] = useState({})\n\n    useEffect(() => {\n         if(device.baseCreatedWin === true && props.load === true) {\n            fetchUsersWin(device.selectedType.id).then(data => {\n                device.setWin(data.users_win)\n                const a = 0\n            }).finally(() => setLoading(false))\n         }\n        const a = 0\n    }, [device.selectedType])\n    if (loading) {\n        return <Spinner animation={\"grow\"}/>\n    }\n\n    return (\n        <Container style={{maxWidth: '100%'}}>\n            {device.baseCreatedWin === true && props.load === true ?\n                <ListGroup>\n                    <div className=\"m-2 list-unstyled d-flex h-100 justify-content-center align-self-center\"\n                         style={{fontSize: 30, color: '#9a1818'}}>VICTORY USERS\n                    </div>\n                    <Row>\n                        <Col className=\"d-flex justify-content-center\" style={{maxWidth: '10%'}}>\n\n                        </Col>\n                        <Col className=\"d-flex justify-content-center\" style={{maxWidth: '40%'}}>\n                            <div style={{fontSize: 25}}>users</div>\n                        </Col>\n                        <Col className=\"d-flex justify-content-center\" style={{maxWidth: '25%'}}>\n                            <div style={{fontSize: 25}}>карта</div>\n                        </Col>\n                        <Col className=\"d-flex justify-content-center\" style={{maxWidth: '25%'}}>\n                            <div style={{fontSize: 25}}>этап</div>\n                        </Col>\n                    </Row>\n                    {\n                        device.baseCreatedWin && props.load === true ? device.win.rows.map((users_win, index) =>\n                        <ListGroup.Item key={index}\n                            //style={{cursor: 'pointer'}}\n                            // active={type.id === device.selectedType.id}\n                            // onClick={() =>\n                            //     brandIf(type, type.id)\n                            // }\n                        >\n\n                            <Row>\n                                <Col className=\"d-flex justify-content-center\" style={{maxWidth: '10%'}}>\n                                    <Image style={{border: '5px solid lightgray'}} width={40} height={40}\n                                           src={process.env.REACT_APP_API_URL + \"cup.png\"}/>\n                                </Col>\n\n                                <Col className=\"d-flex justify-content-center\" style={{maxWidth: '40%'}}>\n                                    <div style={{fontSize: 15}}>{users_win.user}</div>\n                                </Col>\n\n                                <Col className=\"d-flex justify-content-center\" style={{maxWidth: '25%'}}>\n                                    <div style={{fontSize: 15}}>{users_win.brandsName}</div>\n                                </Col>\n                                <Col className=\"d-flex justify-content-center\" style={{maxWidth: '25%'}}>\n                                    <div style={{fontSize: 15}}>{users_win.lap}</div>\n                                </Col>\n                            </Row>\n                        </ListGroup.Item>\n                        )\n                        :\n                        \"\"\n                    }\n                </ListGroup>\n                :\n                \"\"\n            }\n        </Container>\n\n    );\n});\n\nexport default DeviceListStartWin;\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/CreateQiwiTypesDonate.js",[],"/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/pages/QiwiPageTest.js",["341","342","343","344","345","346","347"],"import {observer} from \"mobx-react-lite\";\nimport React, {useEffect, useState} from \"react\";\nimport {fetchQiwi, fetchQiwiPayUsers} from \"../http/qiwiAPI\";\nimport {fetchBrands} from \"../http/deviceAPI\";\nimport {Button, Col, Dropdown, Row, Spinner} from \"react-bootstrap\";\nimport {Container} from \"react-bootstrap\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport DeviceItem from \"../components/DeviceItem\";\nimport {DEVICE_ROUTE} from \"../utils/consts\";\nimport moment from \"moment\";\n\n\nconst QiwiPagination = observer(() => {\n\n    const [qiwiPayUsers, setQiwiPayUsers] = useState({})\n    const [loading, setLoading] = useState(true)\n    useEffect(() => {\n        //setTimeout(() => {\n        fetchQiwiPayUsers().then(data => setQiwiPayUsers(data)).finally(() => setLoading(false));\n        // },1000);\n    }, [])\n\n    if (loading) {\n        return <Spinner animation={\"grow\"}/>\n    }\n\n    const userList = () => {\n        // for(let i = 0; i < qiwiPayUsers.rows.length; i++){\n        //\n        // }\n        //return  qiwiPayUsers.rows[0].username\n    }\n    // const userList = () => {\n    //     var arrayDate = [];\n    //     for (var i in qiwiPayUsers.rows) {\n    //         arrayDate.push(moment(qiwiPayUsers.rows[i].username))\n    //     }\n    //     //return arrayDate\n    //     // for(let i = 0; i < qiwiPayUsers.rows.length; i++){\n    //     //\n    //     // }\n    // }\n\n    return (\n        <Container style={{maxWidth: '100%'}}>\n\n            <Row>\n                <Col style={{maxWidth: '25%'}}>\n                    <ListGroup>\n                        <div className=\"m-2 list-unstyled d-flex h-100 justify-content-center align-self-center\" style={{fontSize: 20}}>Best sum donate</div>\n                        {qiwiPayUsers.donates_best.rows.map((qiwiPayUser, index) =>\n                            <ListGroup.Item key={index}\n                                //style={{cursor: 'pointer'}}\n                                // active={type.id === device.selectedType.id}\n                                // onClick={() =>\n                                //     brandIf(type, type.id)\n                                // }\n                            >\n                                <Row>\n                                    <Col className=\"d-flex justify-content-center\" style={{maxWidth: '65%'}}>\n                                        <div style={{ fontSize: 15}} >{qiwiPayUser.username}</div>\n                                    </Col>\n\n                                    <Col className=\"d-flex justify-content-center\" style={{maxWidth: '35%'}}>\n                                        <div style={{ fontSize: 15}} >{qiwiPayUser.sum} руб.</div>\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n                        )}\n                    </ListGroup>\n                </Col>\n\n                <Col style={{maxWidth: '75%'}}>\n                    <ListGroup>\n                        <div className=\"m-2 list-unstyled d-flex h-100 justify-content-center align-self-center\" style={{fontSize: 20}}>Last donate</div>\n                        {qiwiPayUsers.donates.rows.map((qiwiPayUser, index) =>\n                            <ListGroup.Item key={index}\n                                //style={{cursor: 'pointer'}}\n                                // active={type.id === device.selectedType.id}\n                                // onClick={() =>\n                                //     brandIf(type, type.id)\n                                // }\n                            >\n                                <Row>\n                                    <Col className=\"d-flex justify-content-center\" style={{maxWidth: '20%'}}>\n                                        <div style={{ fontSize: 15}} >{qiwiPayUser.username}</div>\n                                    </Col>\n\n                                    <Col className=\"d-flex justify-content-center\" style={{maxWidth: '15%'}}>\n                                        <div style={{ fontSize: 15}} >{qiwiPayUser.amount} руб.</div>\n                                    </Col>\n                                    <Col className=\"d-flex justify-content-center\" style={{maxWidth: '25%'}}>\n                                        <div style={{ fontSize: 15}} >{moment(qiwiPayUser.createdAt).format('YYYY-MM-DD HH:mm')}</div>\n                                    </Col>\n                                    <Col className=\"d-flex justify-content-left\" style={{maxWidth: '40%'}}>\n                                        <div style={{ fontSize: 15}} >{qiwiPayUser.comment}</div>\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n                        )}\n                    </ListGroup>\n                </Col>\n            </Row>\n\n        </Container>\n\n    );\n\n})\nexport default QiwiPagination;\n\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/LeftBar.js",["348"],"import React, {useContext, useState} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport CreateQiwi from \"./modals/CreateQiwi\";\nimport {Button} from \"react-bootstrap\";\nimport {QIWI_ROUTE, QIWI_ROUTE_PAGINATION} from \"../utils/consts\";\nimport {useHistory} from \"react-router-dom\";\nimport CreateDevice from \"./modals/CreateDevice\";\nimport {Context} from \"../index\";\n\n\nconst LeftBar = observer(() => {\n    const {user} = useContext(Context)\n    const [qiwiVisible, setQiwiVisible] = useState(false)\n    const [deviceVisible, setDeviceVisible] = useState(false)\n    const history = useHistory()\n\n    return (\n\n        <div>\n\n            <li className=\"mb-2 mt-2 list-unstyled d-flex h-100 justify-content-center align-self-center\">\n                <Button\n                    variant={\"warning\"}\n                    onClick={() => setQiwiVisible(true)}\n                    className=\"mr-1\"\n                >\n                    DONATE\n                </Button>\n                <Button\n                    variant={\"outline-secondary\"}\n                    onClick={() => history.push(QIWI_ROUTE)}\n                >\n                    LIST DONATE\n                </Button>\n                {/*<Button*/}\n                {/*    variant={\"outline-secondary\"}*/}\n                {/*    onClick={() => history.push(QIWI_ROUTE_PAGINATION)}*/}\n                {/*>*/}\n                {/*    LIST DONATE*/}\n                {/*</Button>*/}\n            </li>\n            {user.isAuth ?\n            <li className=\"mb-2 list-unstyled d-flex h-100 justify-content-center align-self-center\">\n                <Button\n                    variant={\"outline-dark\"}\n                    // className=\"mt-1 p-2\"\n                    onClick={() => setDeviceVisible(true)}\n                >\n                    GAME REGISTRATION\n                </Button>\n            </li>\n            :\n                \"\"\n            }\n\n\n            <CreateQiwi show={qiwiVisible} onHide={() => setQiwiVisible(false)} nametype=\"cyberbet\" code_transaction={2}/>\n            <CreateDevice show={deviceVisible} onHide={() => setDeviceVisible(false)}/>\n\n        </div>\n\n    );\n\n})\n\nexport default LeftBar\n","/home/navatar/IdeaProjects/GitCloneShop/SHOP-JS-FRONTEND/src/components/lern/UseReff.js",[],{"ruleId":"349","replacedBy":"350"},{"ruleId":"351","replacedBy":"352"},{"ruleId":"353","severity":1,"message":"354","line":5,"column":8,"nodeType":"355","messageId":"356","endLine":5,"endColumn":14},{"ruleId":"353","severity":1,"message":"357","line":14,"column":8,"nodeType":"355","messageId":"356","endLine":14,"endColumn":14},{"ruleId":"353","severity":1,"message":"358","line":15,"column":8,"nodeType":"355","messageId":"356","endLine":15,"endColumn":12},{"ruleId":"359","severity":1,"message":"360","line":38,"column":8,"nodeType":"361","endLine":38,"endColumn":10,"suggestions":"362"},{"ruleId":"353","severity":1,"message":"363","line":1,"column":28,"nodeType":"355","messageId":"356","endLine":1,"endColumn":37},{"ruleId":"353","severity":1,"message":"364","line":6,"column":63,"nodeType":"355","messageId":"356","endLine":6,"endColumn":73},{"ruleId":"353","severity":1,"message":"365","line":11,"column":9,"nodeType":"355","messageId":"356","endLine":11,"endColumn":20},{"ruleId":"353","severity":1,"message":"366","line":11,"column":22,"nodeType":"355","messageId":"356","endLine":11,"endColumn":34},{"ruleId":"353","severity":1,"message":"367","line":11,"column":36,"nodeType":"355","messageId":"356","endLine":11,"endColumn":46},{"ruleId":"353","severity":1,"message":"368","line":12,"column":8,"nodeType":"355","messageId":"356","endLine":12,"endColumn":20},{"ruleId":"353","severity":1,"message":"369","line":16,"column":12,"nodeType":"355","messageId":"356","endLine":16,"endColumn":18},{"ruleId":"353","severity":1,"message":"370","line":5,"column":11,"nodeType":"355","messageId":"356","endLine":5,"endColumn":12},{"ruleId":"353","severity":1,"message":"371","line":2,"column":8,"nodeType":"355","messageId":"356","endLine":2,"endColumn":18},{"ruleId":"353","severity":1,"message":"371","line":2,"column":8,"nodeType":"355","messageId":"356","endLine":2,"endColumn":18},{"ruleId":"353","severity":1,"message":"372","line":2,"column":17,"nodeType":"355","messageId":"356","endLine":2,"endColumn":21},{"ruleId":"353","severity":1,"message":"373","line":7,"column":21,"nodeType":"355","messageId":"356","endLine":7,"endColumn":29},{"ruleId":"353","severity":1,"message":"374","line":15,"column":8,"nodeType":"355","messageId":"356","endLine":15,"endColumn":10},{"ruleId":"353","severity":1,"message":"375","line":25,"column":22,"nodeType":"355","messageId":"356","endLine":25,"endColumn":33},{"ruleId":"359","severity":1,"message":"376","line":58,"column":8,"nodeType":"361","endLine":58,"endColumn":18,"suggestions":"377"},{"ruleId":"378","severity":1,"message":"379","line":174,"column":100,"nodeType":"380","messageId":"381","endLine":174,"endColumn":101},{"ruleId":"353","severity":1,"message":"363","line":1,"column":28,"nodeType":"355","messageId":"356","endLine":1,"endColumn":37},{"ruleId":"353","severity":1,"message":"382","line":8,"column":9,"nodeType":"355","messageId":"356","endLine":8,"endColumn":14},{"ruleId":"353","severity":1,"message":"383","line":19,"column":12,"nodeType":"355","messageId":"356","endLine":19,"endColumn":15},{"ruleId":"353","severity":1,"message":"384","line":19,"column":17,"nodeType":"355","messageId":"356","endLine":19,"endColumn":24},{"ruleId":"353","severity":1,"message":"385","line":1,"column":39,"nodeType":"355","messageId":"356","endLine":1,"endColumn":45},{"ruleId":"353","severity":1,"message":"386","line":2,"column":20,"nodeType":"355","messageId":"356","endLine":2,"endColumn":27},{"ruleId":"353","severity":1,"message":"365","line":10,"column":9,"nodeType":"355","messageId":"356","endLine":10,"endColumn":20},{"ruleId":"353","severity":1,"message":"367","line":10,"column":36,"nodeType":"355","messageId":"356","endLine":10,"endColumn":46},{"ruleId":"353","severity":1,"message":"387","line":15,"column":8,"nodeType":"355","messageId":"356","endLine":15,"endColumn":15},{"ruleId":"353","severity":1,"message":"388","line":16,"column":9,"nodeType":"355","messageId":"356","endLine":16,"endColumn":22},{"ruleId":"353","severity":1,"message":"389","line":21,"column":20,"nodeType":"355","messageId":"356","endLine":21,"endColumn":28},{"ruleId":"353","severity":1,"message":"390","line":21,"column":30,"nodeType":"355","messageId":"356","endLine":21,"endColumn":34},{"ruleId":"353","severity":1,"message":"391","line":22,"column":12,"nodeType":"355","messageId":"356","endLine":22,"endColumn":19},{"ruleId":"353","severity":1,"message":"392","line":22,"column":21,"nodeType":"355","messageId":"356","endLine":22,"endColumn":31},{"ruleId":"353","severity":1,"message":"393","line":23,"column":12,"nodeType":"355","messageId":"356","endLine":23,"endColumn":20},{"ruleId":"353","severity":1,"message":"394","line":23,"column":22,"nodeType":"355","messageId":"356","endLine":23,"endColumn":33},{"ruleId":"353","severity":1,"message":"395","line":25,"column":19,"nodeType":"355","messageId":"356","endLine":25,"endColumn":27},{"ruleId":"353","severity":1,"message":"370","line":28,"column":15,"nodeType":"355","messageId":"356","endLine":28,"endColumn":16},{"ruleId":"359","severity":1,"message":"396","line":41,"column":8,"nodeType":"361","endLine":41,"endColumn":71,"suggestions":"397"},{"ruleId":"353","severity":1,"message":"363","line":1,"column":26,"nodeType":"355","messageId":"356","endLine":1,"endColumn":35},{"ruleId":"353","severity":1,"message":"398","line":1,"column":37,"nodeType":"355","messageId":"356","endLine":1,"endColumn":47},{"ruleId":"353","severity":1,"message":"390","line":12,"column":22,"nodeType":"355","messageId":"356","endLine":12,"endColumn":26},{"ruleId":"353","severity":1,"message":"364","line":5,"column":23,"nodeType":"355","messageId":"356","endLine":5,"endColumn":33},{"ruleId":"353","severity":1,"message":"399","line":10,"column":23,"nodeType":"355","messageId":"356","endLine":10,"endColumn":36},{"ruleId":"353","severity":1,"message":"400","line":11,"column":17,"nodeType":"355","messageId":"356","endLine":11,"endColumn":26},{"ruleId":"353","severity":1,"message":"401","line":11,"column":28,"nodeType":"355","messageId":"356","endLine":11,"endColumn":31},{"ruleId":"353","severity":1,"message":"402","line":24,"column":12,"nodeType":"355","messageId":"356","endLine":24,"endColumn":17},{"ruleId":"353","severity":1,"message":"395","line":24,"column":19,"nodeType":"355","messageId":"356","endLine":24,"endColumn":27},{"ruleId":"353","severity":1,"message":"403","line":40,"column":12,"nodeType":"355","messageId":"356","endLine":40,"endColumn":18},{"ruleId":"353","severity":1,"message":"404","line":40,"column":20,"nodeType":"355","messageId":"356","endLine":40,"endColumn":29},{"ruleId":"353","severity":1,"message":"370","line":50,"column":19,"nodeType":"355","messageId":"356","endLine":50,"endColumn":20},{"ruleId":"359","severity":1,"message":"405","line":56,"column":8,"nodeType":"361","endLine":56,"endColumn":58,"suggestions":"406"},{"ruleId":"353","severity":1,"message":"407","line":120,"column":11,"nodeType":"355","messageId":"356","endLine":120,"endColumn":33},{"ruleId":"353","severity":1,"message":"408","line":4,"column":22,"nodeType":"355","messageId":"356","endLine":4,"endColumn":34},{"ruleId":"353","severity":1,"message":"409","line":4,"column":36,"nodeType":"355","messageId":"356","endLine":4,"endColumn":46},{"ruleId":"353","severity":1,"message":"410","line":13,"column":11,"nodeType":"355","messageId":"356","endLine":13,"endColumn":29},{"ruleId":"353","severity":1,"message":"411","line":4,"column":8,"nodeType":"355","messageId":"356","endLine":4,"endColumn":11},{"ruleId":"353","severity":1,"message":"374","line":7,"column":8,"nodeType":"355","messageId":"356","endLine":7,"endColumn":10},{"ruleId":"353","severity":1,"message":"365","line":8,"column":9,"nodeType":"355","messageId":"356","endLine":8,"endColumn":20},{"ruleId":"353","severity":1,"message":"382","line":12,"column":9,"nodeType":"355","messageId":"356","endLine":12,"endColumn":14},{"ruleId":"353","severity":1,"message":"388","line":13,"column":9,"nodeType":"355","messageId":"356","endLine":13,"endColumn":22},{"ruleId":"353","severity":1,"message":"412","line":14,"column":8,"nodeType":"355","messageId":"356","endLine":14,"endColumn":12},{"ruleId":"353","severity":1,"message":"402","line":18,"column":12,"nodeType":"355","messageId":"356","endLine":18,"endColumn":17},{"ruleId":"353","severity":1,"message":"395","line":18,"column":19,"nodeType":"355","messageId":"356","endLine":18,"endColumn":27},{"ruleId":"353","severity":1,"message":"413","line":20,"column":12,"nodeType":"355","messageId":"356","endLine":20,"endColumn":25},{"ruleId":"353","severity":1,"message":"414","line":20,"column":27,"nodeType":"355","messageId":"356","endLine":20,"endColumn":43},{"ruleId":"353","severity":1,"message":"415","line":21,"column":11,"nodeType":"355","messageId":"356","endLine":21,"endColumn":18},{"ruleId":"359","severity":1,"message":"405","line":28,"column":8,"nodeType":"361","endLine":28,"endColumn":10,"suggestions":"416"},{"ruleId":"417","severity":1,"message":"418","line":65,"column":17,"nodeType":"419","endLine":65,"endColumn":79},{"ruleId":"353","severity":1,"message":"363","line":1,"column":28,"nodeType":"355","messageId":"356","endLine":1,"endColumn":37},{"ruleId":"353","severity":1,"message":"401","line":3,"column":33,"nodeType":"355","messageId":"356","endLine":3,"endColumn":36},{"ruleId":"353","severity":1,"message":"411","line":3,"column":38,"nodeType":"355","messageId":"356","endLine":3,"endColumn":41},{"ruleId":"353","severity":1,"message":"386","line":3,"column":43,"nodeType":"355","messageId":"356","endLine":3,"endColumn":50},{"ruleId":"353","severity":1,"message":"420","line":18,"column":12,"nodeType":"355","messageId":"356","endLine":18,"endColumn":29},{"ruleId":"353","severity":1,"message":"421","line":18,"column":31,"nodeType":"355","messageId":"356","endLine":18,"endColumn":51},{"ruleId":"349","replacedBy":"422"},{"ruleId":"351","replacedBy":"423"},{"ruleId":"353","severity":1,"message":"409","line":4,"column":28,"nodeType":"355","messageId":"356","endLine":4,"endColumn":38},{"ruleId":"353","severity":1,"message":"424","line":4,"column":9,"nodeType":"355","messageId":"356","endLine":4,"endColumn":18},{"ruleId":"353","severity":1,"message":"425","line":4,"column":35,"nodeType":"355","messageId":"356","endLine":4,"endColumn":46},{"ruleId":"359","severity":1,"message":"426","line":32,"column":8,"nodeType":"361","endLine":32,"endColumn":13,"suggestions":"427"},{"ruleId":"378","severity":1,"message":"379","line":92,"column":105,"nodeType":"380","messageId":"381","endLine":92,"endColumn":106},{"ruleId":"378","severity":1,"message":"379","line":96,"column":108,"nodeType":"380","messageId":"381","endLine":96,"endColumn":109},{"ruleId":"428","severity":1,"message":"429","line":123,"column":25,"nodeType":"419","messageId":"430","endLine":123,"endColumn":208,"fix":"431"},{"ruleId":"428","severity":1,"message":"429","line":148,"column":25,"nodeType":"419","messageId":"430","endLine":148,"endColumn":208,"fix":"432"},{"ruleId":"428","severity":1,"message":"429","line":176,"column":25,"nodeType":"419","messageId":"430","endLine":176,"endColumn":214,"fix":"433"},{"ruleId":"428","severity":1,"message":"429","line":201,"column":25,"nodeType":"419","messageId":"430","endLine":201,"endColumn":214,"fix":"434"},{"ruleId":"428","severity":1,"message":"429","line":230,"column":25,"nodeType":"419","messageId":"430","endLine":230,"endColumn":216,"fix":"435"},{"ruleId":"428","severity":1,"message":"429","line":255,"column":25,"nodeType":"419","messageId":"430","endLine":255,"endColumn":216,"fix":"436"},{"ruleId":"428","severity":1,"message":"429","line":282,"column":55,"nodeType":"419","messageId":"430","endLine":282,"endColumn":101,"fix":"437"},{"ruleId":"428","severity":1,"message":"429","line":312,"column":55,"nodeType":"419","messageId":"430","endLine":312,"endColumn":101,"fix":"438"},{"ruleId":"353","severity":1,"message":"439","line":2,"column":20,"nodeType":"355","messageId":"356","endLine":2,"endColumn":24},{"ruleId":"353","severity":1,"message":"398","line":1,"column":16,"nodeType":"355","messageId":"356","endLine":1,"endColumn":26},{"ruleId":"353","severity":1,"message":"440","line":2,"column":9,"nodeType":"355","messageId":"356","endLine":2,"endColumn":16},{"ruleId":"353","severity":1,"message":"441","line":3,"column":8,"nodeType":"355","messageId":"356","endLine":3,"endColumn":14},{"ruleId":"353","severity":1,"message":"442","line":4,"column":8,"nodeType":"355","messageId":"356","endLine":4,"endColumn":11},{"ruleId":"353","severity":1,"message":"443","line":5,"column":9,"nodeType":"355","messageId":"356","endLine":5,"endColumn":16},{"ruleId":"353","severity":1,"message":"444","line":6,"column":9,"nodeType":"355","messageId":"356","endLine":6,"endColumn":23},{"ruleId":"428","severity":1,"message":"429","line":32,"column":33,"nodeType":"419","messageId":"430","endLine":32,"endColumn":110,"fix":"445"},{"ruleId":"353","severity":1,"message":"446","line":2,"column":8,"nodeType":"355","messageId":"356","endLine":2,"endColumn":16},{"ruleId":"353","severity":1,"message":"447","line":12,"column":12,"nodeType":"355","messageId":"356","endLine":12,"endColumn":27},{"ruleId":"353","severity":1,"message":"448","line":12,"column":29,"nodeType":"355","messageId":"356","endLine":12,"endColumn":47},{"ruleId":"353","severity":1,"message":"449","line":1,"column":9,"nodeType":"355","messageId":"356","endLine":1,"endColumn":18},{"ruleId":"353","severity":1,"message":"450","line":3,"column":9,"nodeType":"355","messageId":"356","endLine":3,"endColumn":18},{"ruleId":"353","severity":1,"message":"365","line":4,"column":9,"nodeType":"355","messageId":"356","endLine":4,"endColumn":20},{"ruleId":"353","severity":1,"message":"451","line":5,"column":9,"nodeType":"355","messageId":"356","endLine":5,"endColumn":15},{"ruleId":"353","severity":1,"message":"452","line":5,"column":22,"nodeType":"355","messageId":"356","endLine":5,"endColumn":30},{"ruleId":"353","severity":1,"message":"453","line":8,"column":8,"nodeType":"355","messageId":"356","endLine":8,"endColumn":18},{"ruleId":"353","severity":1,"message":"454","line":9,"column":9,"nodeType":"355","messageId":"356","endLine":9,"endColumn":21},{"ruleId":"353","severity":1,"message":"386","line":3,"column":23,"nodeType":"355","messageId":"356","endLine":3,"endColumn":30},{"ruleId":"353","severity":1,"message":"409","line":4,"column":9,"nodeType":"355","messageId":"356","endLine":4,"endColumn":19},{"ruleId":"353","severity":1,"message":"366","line":4,"column":21,"nodeType":"355","messageId":"356","endLine":4,"endColumn":33},{"ruleId":"359","severity":1,"message":"455","line":28,"column":8,"nodeType":"361","endLine":28,"endColumn":29,"suggestions":"456"},{"ruleId":"353","severity":1,"message":"372","line":2,"column":9,"nodeType":"355","messageId":"356","endLine":2,"endColumn":13},{"ruleId":"353","severity":1,"message":"457","line":4,"column":8,"nodeType":"355","messageId":"356","endLine":4,"endColumn":12},{"ruleId":"353","severity":1,"message":"458","line":5,"column":9,"nodeType":"355","messageId":"356","endLine":5,"endColumn":19},{"ruleId":"353","severity":1,"message":"454","line":6,"column":9,"nodeType":"355","messageId":"356","endLine":6,"endColumn":21},{"ruleId":"353","severity":1,"message":"453","line":9,"column":8,"nodeType":"355","messageId":"356","endLine":9,"endColumn":18},{"ruleId":"353","severity":1,"message":"382","line":10,"column":9,"nodeType":"355","messageId":"356","endLine":10,"endColumn":14},{"ruleId":"353","severity":1,"message":"388","line":11,"column":9,"nodeType":"355","messageId":"356","endLine":11,"endColumn":22},{"ruleId":"353","severity":1,"message":"365","line":12,"column":9,"nodeType":"355","messageId":"356","endLine":12,"endColumn":20},{"ruleId":"353","severity":1,"message":"366","line":12,"column":22,"nodeType":"355","messageId":"356","endLine":12,"endColumn":34},{"ruleId":"353","severity":1,"message":"367","line":12,"column":36,"nodeType":"355","messageId":"356","endLine":12,"endColumn":46},{"ruleId":"353","severity":1,"message":"459","line":15,"column":9,"nodeType":"355","messageId":"356","endLine":15,"endColumn":26},{"ruleId":"353","severity":1,"message":"460","line":21,"column":12,"nodeType":"355","messageId":"356","endLine":21,"endColumn":15},{"ruleId":"353","severity":1,"message":"461","line":21,"column":17,"nodeType":"355","messageId":"356","endLine":21,"endColumn":23},{"ruleId":"353","severity":1,"message":"370","line":27,"column":23,"nodeType":"355","messageId":"356","endLine":27,"endColumn":24},{"ruleId":"353","severity":1,"message":"370","line":30,"column":15,"nodeType":"355","messageId":"356","endLine":30,"endColumn":16},{"ruleId":"359","severity":1,"message":"462","line":31,"column":8,"nodeType":"361","endLine":31,"endColumn":29,"suggestions":"463"},{"ruleId":"353","severity":1,"message":"450","line":3,"column":9,"nodeType":"355","messageId":"356","endLine":3,"endColumn":18},{"ruleId":"353","severity":1,"message":"365","line":4,"column":9,"nodeType":"355","messageId":"356","endLine":4,"endColumn":20},{"ruleId":"353","severity":1,"message":"451","line":5,"column":9,"nodeType":"355","messageId":"356","endLine":5,"endColumn":15},{"ruleId":"353","severity":1,"message":"452","line":5,"column":22,"nodeType":"355","messageId":"356","endLine":5,"endColumn":30},{"ruleId":"353","severity":1,"message":"453","line":8,"column":8,"nodeType":"355","messageId":"356","endLine":8,"endColumn":18},{"ruleId":"353","severity":1,"message":"454","line":9,"column":9,"nodeType":"355","messageId":"356","endLine":9,"endColumn":21},{"ruleId":"353","severity":1,"message":"464","line":27,"column":11,"nodeType":"355","messageId":"356","endLine":27,"endColumn":19},{"ruleId":"353","severity":1,"message":"465","line":5,"column":21,"nodeType":"355","messageId":"356","endLine":5,"endColumn":42},"no-native-reassign",["466"],"no-negated-in-lhs",["467"],"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","'PayPal' is defined but never used.","'Qiwi' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'device', 'user', and 'userdata'. Either include them or remove the dependency array.","ArrayExpression",["468"],"'useEffect' is defined but never used.","'QIWI_ROUTE' is defined but never used.","'fetchBrands' is defined but never used.","'fetchDevices' is defined but never used.","'fetchTypes' is defined but never used.","'CreateDevice' is defined but never used.","'device' is assigned a value but never used.","'a' is assigned a value but never used.","'jwt_decode' is defined but never used.","'Card' is defined but never used.","'imgPhoto' is defined but never used.","'ru' is defined but never used.","'setLoading4' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id' and 'useEffectBool'. Either include them or remove the dependency array.",["469"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'check' is defined but never used.","'img' is assigned a value but never used.","'setFile' is assigned a value but never used.","'useRef' is defined but never used.","'Spinner' is defined but never used.","'UseReff' is defined but never used.","'checkUserData' is defined but never used.","'userdata' is assigned a value but never used.","'user' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'loading2' is assigned a value but never used.","'setLoading2' is assigned a value but never used.","'setState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'callbackTypeBar' and 'device'. Either include them or remove the dependency array.",["470"],"'useContext' is defined but never used.","'fetchVSDevice' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'state' is assigned a value but never used.","'sortAZ' is assigned a value but never used.","'setSortAZ' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'device'. Either include it or remove the dependency array.",["471"],"'renderMassiveComponent' is assigned a value but never used.","'createDevice' is defined but never used.","'createType' is defined but never used.","'idBrandBarIfidname' is assigned a value but never used.","'Col' is defined but never used.","'Shop' is defined but never used.","'deviceVisible' is assigned a value but never used.","'setDeviceVisible' is assigned a value but never used.","'history' is assigned a value but never used.",["472"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'massiveChampStart' is assigned a value but never used.","'setMassiveChampStart' is assigned a value but never used.",["466"],["467"],"'createImg' is defined but never used.","'imgPhotoGet' is defined but never used.","React Hook useEffect has missing dependencies: 'id' and 'type'. Either include them or remove the dependency array.",["473"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"474","text":"475"},{"range":"476","text":"475"},{"range":"477","text":"475"},{"range":"478","text":"475"},{"range":"479","text":"475"},{"range":"480","text":"475"},{"range":"481","text":"475"},{"range":"482","text":"475"},"'Form' is defined but never used.","'Context' is defined but never used.","'Navbar' is defined but never used.","'Nav' is defined but never used.","'NavLink' is defined but never used.","'ADMIN_SETTINGS' is defined but never used.",{"range":"483","text":"475"},"'ReactDOM' is defined but never used.","'saveTransaction' is assigned a value but never used.","'setSaveTransaction' is assigned a value but never used.","'$authHost' is defined but never used.","'fetchQiwi' is defined but never used.","'Button' is defined but never used.","'Dropdown' is defined but never used.","'DeviceItem' is defined but never used.","'DEVICE_ROUTE' is defined but never used.","React Hook useEffect has missing dependencies: 'nametype', 'user.isAuth', and 'userdata.userData.username'. Either include them or remove the dependency array. If 'setDescription' needs the current value of 'nametype', you can also switch to useReducer instead of useState and read 'nametype' in the reducer.",["484"],"'star' is defined but never used.","'useHistory' is defined but never used.","'fetchQiwiPayUsers' is defined but never used.","'win' is assigned a value but never used.","'setWin' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'device' and 'props.load'. Either include them or remove the dependency array.",["485"],"'userList' is assigned a value but never used.","'QIWI_ROUTE_PAGINATION' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},{"desc":"490","fix":"491"},{"desc":"492","fix":"493"},{"desc":"494","fix":"495"},{"desc":"496","fix":"497"},[5238,5238]," rel=\"noreferrer\"",[6856,6856],[8570,8570],[10212,10212],[11938,11938],[13586,13586],[15177,15177],[16832,16832],[1416,1416],{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},"Update the dependencies array to be: [device, user, userdata]",{"range":"502","text":"503"},"Update the dependencies array to be: [id, imgPhoto, useEffectBool]",{"range":"504","text":"505"},"Update the dependencies array to be: [device.page, device.selectedType, device.selectedBrand, state, device, callbackTypeBar]",{"range":"506","text":"507"},"Update the dependencies array to be: [colorBtnUser, colorBtnOpp, datePicker, dataStart, device]",{"range":"508","text":"509"},"Update the dependencies array to be: [device]",{"range":"510","text":"511"},"Update the dependencies array to be: [id, img, type]",{"range":"512","text":"513"},"Update the dependencies array to be: [device.selectedType, nametype, user.isAuth, userdata.userData.username]",{"range":"514","text":"515"},"Update the dependencies array to be: [device, device.selectedType, props.load]",{"range":"516","text":"517"},[1478,1480],"[device, user, userdata]",[2277,2287],"[id, imgPhoto, useEffectBool]",[1810,1873],"[device.page, device.selectedType, device.selectedBrand, state, device, callbackTypeBar]",[2144,2194],"[colorBtnUser, colorBtnOpp, datePicker, dataStart, device]",[1075,1077],"[device]",[1238,1243],"[id, img, type]",[948,969],"[device.selectedType, nametype, user.isAuth, userdata.userData.username]",[1223,1244],"[device, device.selectedType, props.load]"]
